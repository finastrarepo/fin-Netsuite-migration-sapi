<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq"
	xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd
http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd">
	
	<sub-flow
		name="customerBilling-Implementation"
		doc:id="bfac821c-99f1-43f9-aa52-6793ea6155fe">
		<set-variable value="#[payload.customerbilling]" doc:name="customerBillingPayload"
			doc:id="0415d97d-16c7-4399-9f37-344d0daaefbc"
			variableName="customerBillingPayload" mimeType="application/json" />
		<flow-ref doc:name="oauth-header-generator-soapHeader"
			doc:id="333bc727-ed86-4efd-9abd-d921ded27d79"
			name="oauth-header-generator-soapHeader" />
		<logger level="INFO" doc:name="Logger" doc:id="f36c44fa-bab6-4ee8-af28-f26c3abb5144" category="@@@@@@@@OAuth Header Value@@@@@@@@@@@@" message="#[vars.oAuthHeaderFinal]"/>
		<ee:transform doc:name="requestPayload"
			doc:id="052d93ea-2ef2-42b2-b9d1-a53d64a47a35">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:messages.platform.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns13 urn:customization_2020_1.setup.webservices.netsuite.com


---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
    soap#Envelope @("xmlns:S":"http://schemas.xmlsoap.org/soap/envelope/" ): {
              soap#Header:{
            urn#tokenPassport:{
                ns8#account : p('kimbleSoapNetsuite.realm'),
                ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
                ns8#token: p('secure::kimbleSoapNetsuite.token'),
                ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
                ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
                ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2] },
                
       ns1#preferences :{
        ns2#ignoreReadOnlyFields  :true } ,
   
    ns3#searchPreferences  :{
        ns4#bodyFieldsOnly : true ,
        ns5#pageSize :50   }
 },
        
    
    soap#Body:{
        ns24#upsertList @("xmlns:ns5":"urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6":"urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3":"urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns4":"urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9":"urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7":"urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8":"urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19":"urn:supplychain_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns18":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns2":"urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns17":"urn:marketing_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16":"urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns15":"urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns14":"urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns13":"urn:customization_2020_1.setup.webservices.netsuite.com" ,	
		"xmlns:ns12":"urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23":"urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11":"urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22":"urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns10":"urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21":"urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20":"urn:bank_2020_1.transactions.webservices.netsuite.com") : {
             ns24#record @("xsi:type":"ns13:CustomRecord","externalId" : vars.customerBillingPayload.id , "xmlns:xsi" : "http://www.w3.org/2001/XMLSchema-instance"):{
                             
                
     //          customFieldList: {
		//				customField @( "xsi:type":"core:StringCustomFieldRef", "scriptId":"custbody_invoice_credit_body" ,"xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com"): {
			//				value: p('invoice.creditBody')
				//		}
					//},
					
				ns13#name: vars.customerBillingPayload.name  ,
                ns13#recType @("internalId":402 ) : "" ,				
			
                ns13#customFieldList:{
                	
                        customField  @("xsi:type":"SelectCustomFieldRef", "scriptId":"custrecord_cbs_project"):{ value @("internalId" : vars.customerBillingPayload.nsProjectInternalId ) : ""},
                        
                        customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custrecord_exportedfromsfdc"):{ value : "true" },
                        
                        customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custrecord_syncedtosfdc"):{ value : "false"},
                        
                        customField  @("xsi:type":"DoubleCustomFieldRef", "scriptId":"custrecord_cbs_initial_amount"):{ value : vars.customerBillingPayload.initialAmount},
                        
                        customField  @("xsi:type":"SelectCustomFieldRef", "scriptId":"custrecord_cbs_initial_payment_terms"):{ value @("internalId" : vars.customerBillingPayload.initialPaymentTermsInternalId ) : ""},
                        
                        customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custrecord_cbs_public"):{ value @("internalId" : vars.customerBillingPayload.public ) : ""},
                        
                        customField  @("xsi:type":"DoubleCustomFieldRef", "scriptId":"custrecord_cbs_line_amount"):{ value : vars.customerBillingPayload.lineAmount },
                        
                        customField  @("xsi:type":"SelectCustomFieldRef", "scriptId":"custrecord_cbs_line_payment_terms"):{ value @("internalId" : vars.customerBillingPayload.linePaymentTermsInternal ) : ""},
                        
                        customField  @("xsi:type":"SelectCustomFieldRef", "scriptId":"custrecord_cbs_line_milestone"):{ value @("internalId" : vars.customerBillingPayload.lineMilestoneInternalId ) : ""},
                        
                        customField  @("xsi:type":"DateCustomFieldRef", "scriptId":"custrecord_cbs_line_est_completion_date"):{ value : vars.customerBillingPayload.lineEstimatedCompletionDate + "T00:00:00.000Z" },
                        
                        customField  @("xsi:type":"StringCustomFieldRef", "scriptId":"custrecord_cbs_line_comment"):{ value : vars.customerBillingPayload.lineComment },
                        
                        customField  @("xsi:type":"SelectCustomFieldRef", "scriptId":"custrecord_cbs_sales_order"):{ value @("internalId" : vars.customerBillingPayload.salesOrderInternalId ) : ""},
                        
                        customField  @("xsi:type":"StringCustomFieldRef", "scriptId":"custrecord_cbs_line_milestone_sequence"):{ value @("internalId" : vars.customerBillingPayload.lineMilestoneSequence ) : ""},
                        
                        customField  @("xsi:type":"DateCustomFieldRef", "scriptId":"custrecord_cbs_drop_dead_date"):{ value : vars.customerBillingPayload.lineDropDeadDate + "T00:00:00.000Z"}
                                                                       
}

}
}
}
}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="payloadXML"
			doc:id="78b21d17-1219-401f-8729-9d40b9b9391a">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="soapHeader"><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
---
{
headers: payload.Envelope.Header


}]]></ee:set-variable>
				<ee:set-variable variableName="targetPayload"><![CDATA[%dw 2.0
output application/xml
---
payload]]></ee:set-variable>

			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger - Full payload "
			doc:id="7b8ec6fd-bfc4-43cf-9e70-2e8e9681905c" message="#[payload]" />
		<try doc:name="Try" doc:id="a155ebf4-1580-4a77-b01a-84c8a09c12a2">
			
	
			<wsc:consume doc:name="InvokeCustomerBilling"
				doc:id="4894db8f-a6d9-4e63-90d5-b952b9a49b21"
				config-ref="Web_Service_Consumer_Config"
				operation="${soap.wsdlUpsertOperation}" target="responsePayload">
			<wsc:message>
					<wsc:body><![CDATA[#[payload.Envelope.Body]]]></wsc:body>
					<wsc:headers><![CDATA[#[vars.soapHeader]]]></wsc:headers>
				</wsc:message>
			</wsc:consume>
			<error-handler>
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="fbf56304-abda-4365-92c9-28aed8fbaca1" type="ANY" >
					<logger level="INFO" doc:name="Logger" doc:id="c536c764-48e4-4e7d-9d1a-a0618a04108f" message="#[error.description]" />
					<ee:transform doc:name="Transform Message" doc:id="6705b014-c859-40d4-811c-c98a06e58bfc" >
						<ee:message >
						</ee:message>
						<ee:variables >
							<ee:set-variable variableName="logData" ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	customerBillingSchedule: {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "nsCustomerBillingSchedule",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
					<anypoint-mq:publish doc:name="Publish" doc:id="44038635-4988-459c-87ca-188d29e4b43f" config-ref="Anypoint_MQ_Config" destination="project-setup-DL-queue" >
						<anypoint-mq:properties ><![CDATA[#[output application/java
---
{
	objectName : Job
}]]]></anypoint-mq:properties>
					</anypoint-mq:publish>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="ee341073-6515-43e4-83b1-e6262d08c73f" message="#[vars.responsePayload]"/>
		<ee:transform doc:name="netsuiteInternalId" doc:id="4f85e5b4-2f9d-4900-9d39-da8030e960d2">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com

---
{
	externalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@externalId,
	internalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="netsuiteInternalId" doc:id="32a23cf1-d26d-4cc2-ae98-de0700436d26" message="#[payload]"/>
	
	<logger level="INFO" doc:name="Logger for error code" doc:id="47736035-fb2d-4529-8498-3e2a61c9ad51" message="#[%dw 2.0
output application/json
---
{
       (code: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.code) if (vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.code != null)
       
}]"/>
		<logger level="INFO" doc:name="Logger" doc:id="7ce878d3-23c2-44eb-b641-b6ee10c019b4" message='#[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]'/>
		<ee:transform doc:name="isSuccess" doc:id="b82ec1cb-4647-42e0-9a6f-0e652e06e40b">
			<ee:message>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="isSuccess" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	
	message :  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess
}]]></ee:set-variable>
				<ee:set-variable variableName="businessError" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="16551028-48ac-4237-8cc5-ec8aec32270e" >
			<when expression="#[vars.isSuccess.message == 'true']">
				<ee:transform doc:name="Transform Message" doc:id="2b7dc72e-d8ee-4cc0-82b6-f5a4288d10ba" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{
	nsCustomerBilling: {
		externalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@externalId,
		netsuiteInternalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
		syncedToNS: true
	}
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger - BEFOREE MQ" doc:id="c86670fe-451c-4836-84e5-ddc682dbd257" message="#[payload]" />
				<anypoint-mq:publish doc:name="Publish_to_ResponseQueue" doc:id="85c0391d-0e64-4361-800b-eda28501b69e" config-ref="Anypoint_MQ_Config" destination="${secure::mq.publish-name}">
			<anypoint-mq:properties ><![CDATA[#[output application/java
---
{
	"correlationId" : vars.inputProperties.correlationId,
	"operationType" : vars.inputProperties.operationType,
	"apiName" : "fin-netsuite-finance-ent-sapi",
	"apiVersion" : "v1.0",
	"objectName" : "customerBillingSchedule",
	"queueName" : p('secure::mq.publish-name')
}]]]></anypoint-mq:properties>
		</anypoint-mq:publish>
				
					</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="9f970f38-2952-4c53-af14-f531a79c8654" message="#[payload]"/>
				<ee:transform doc:name="Transform Message" doc:id="5e1b4d8b-6bfb-43f8-b8e1-5eeb3bc71710">
					<ee:message>
						<ee:set-payload><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	customerBillingSchedule: {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "nsCustomerBillingSchedule",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<anypoint-mq:publish doc:name="Publish_to_ErrorQueue" doc:id="1f19dcb3-712f-4091-ac55-6b5d71f034e7" config-ref="Anypoint_MQ_Config" destination="project-setup-DL-queue"/>
			</otherwise>
		</choice>
		<logger level="INFO" doc:name="Logger-Print Payload" doc:id="f300ee29-0599-4224-8eb1-ab8da6bbf15a" message="#[payload]"/>
		<async doc:name="Async" doc:id="70a7d7ed-8855-4083-8348-0284f6cbb439" >
			<flow-ref doc:name="log-payload" doc:id="51acd818-6de2-4b4e-95f2-239fcc8e258d" name="log-payload" />
		</async>
	
	</sub-flow>
	<sub-flow name="customerBilling-syncback-implementation" doc:id="d1b4e7cf-0f8e-4290-a2b8-769942c790bd" >
		<set-variable value="#[payload.nsCustomerBilling]" doc:name="customerBillingSyncPayload" doc:id="7ef99dd1-9645-4dba-bbac-c31e373f361c" variableName="customerBillingSyncPayload" mimeType="application/json" />
		<flow-ref doc:name="oauth-header-generator-soapHeader" doc:id="3435f746-6915-4f56-b28e-fd6b974da542" name="oauth-header-generator-soapHeader" />
		<logger level="INFO" doc:name="Logger" doc:id="9f2483d3-6b44-4feb-877c-f530917b0fd0" message="#[vars.oAuthHeaderFinal]" category="@@@@@@@@OAuth Header Value@@@@@@@@@@@@" />
		<ee:transform doc:name="requestPayload" doc:id="44a089ca-8bdc-4512-a75d-51ed04eda0e4" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:messages.platform.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com


---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
    soap#Envelope @("xmlns:S":"http://schemas.xmlsoap.org/soap/envelope/",
    "xmlns:messages" : "urn:messages_2020_1.platform.webservices.netsuite.com",
     "xmlns:accountingLists":"urn:accounting_2020_1.lists.webservices.netsuite.com",
     "xmlns:employeesLists":"urn:employees_2020_1.lists.webservices.netsuite.com", 
     "xmlns:employeesTransactionsTypes":"urn:types.employees_2020_1.transactions.webservices.netsuite.com" ,
      "xmlns:demandplanningTransactions":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com",
       "xmlns:common":"urn:common_2020_1.platform.webservices.netsuite.com", 
       "xmlns:commonTypes":"urn:types.common_2020_1.platform.webservices.netsuite.com" , 
       "xmlns:accountingListsTypes": "urn:types.accounting_2020_1.lists.webservices.netsuite.com", 
       "xmlns:customizationSetup":"urn:customization_2020_1.setup.webservices.netsuite.com",
        "xmlns:inventoryTransactionsTypes": "urn:types.inventory_2020_1.transactions.webservices.netsuite.com",
        "xmlns:supportLists":"urn:support_2020_1.lists.webservices.netsuite.com",
        "xmlns:filecabinetDocuments":"urn:filecabinet_2020_1.documents.webservices.netsuite.com",
  "xmlns:bankTransactionsTypes":"urn:types.bank_2020_1.transactions.webservices.netsuite.com", 
  "xmlns:communicationGeneralTypes":"urn:types.communication_2020_1.general.webservices.netsuite.com", 
  "xmlns:customizationSetupTypes":"urn:types.customization_2020_1.setup.webservices.netsuite.com" , 
  "xmlns:supplychainListsTypes":"urn:types.supplychain_2020_1.lists.webservices.netsuite.com" ,
  "xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com",
  "xmlns:coreTypes":"urn:types.core_2020_1.platform.webservices.netsuite.com", 
 "xmlns:soapenc":"http://schemas.xmlsoap.org/soap/encoding/",
 "xmlns:supplychainLists":"urn:supplychain_2020_1.lists.webservices.netsuite.com", 
 "xmlns:demandplanningTransactionsTypes":"urn:types.demandplanning_2020_1.transactions.webservices.netsuite.com" ,
 "xmlns:websiteLists":"urn:website_2020_1.lists.webservices.netsuite.com",
 "xmlns:salesTransactions":"urn:sales_2020_1.transactions.webservices.netsuite.com",
 "xmlns:salesTransactionsTypes":"urn:types.sales_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:relationshipsLists":"urn:relationships_2020_1.lists.webservices.netsuite.com", 
 "xmlns:inventoryTransactions":"urn:inventory_2020_1.transactions.webservices.netsuite.com",
 "xmlns:employeesListsTypes":"urn:types.employees_2020_1.lists.webservices.netsuite.com",
 "xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance", 
 "xmlns:customersTransactions":"urn:customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivitiesTypes":"urn:types.scheduling_2020_1.activities.webservices.netsuite.com", 
 "xmlns:financialTransactions":"urn:financial_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:xsd":"http://www.w3.org/2001/XMLSchema", 
 "xmlns:relationshipsListsTypes":"urn:types.relationships_2020_1.lists.webservices.netsuite.com",
 "xmlns:employeesTransactions":"urn:employees_2020_1.transactions.webservices.netsuite.com",
 "xmlns:faults":"urn:faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:marketingListsTypes":"urn:types.marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:communicationGeneral":"urn:communication_2020_1.general.webservices.netsuite.com",
 "xmlns:faultsTypes":"urn:types.faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:supportListsTypes":"urn:types.support_2020_1.lists.webservices.netsuite.com",
 "xmlns:websiteListsTypes":"urn:types.website_2020_1.lists.webservices.netsuite.com",
 "xmlns:purchasesTransactions":"urn:purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:financialTransactionsTypes":"urn:types.financial_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivities":"urn:scheduling_2020_1.activities.webservices.netsuite.com",
 "xmlns:bankTransactions":"urn:bank_2020_1.transactions.webservices.netsuite.com",
 "xmlns:marketingLists":"urn:marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:customersTransactionsTypes":"urn:types.customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:purchasesTransactionsTypes":"urn:types.purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:generalTransactions":"urn:general_2020_1.transactions.webservices.netsuite.com",
 "xmlns:filecabinetDocumentsTypes":"urn:types.filecabinet_2020_1.documents.webservices.netsuite.com" ): {
              soap#Header:{
            urn#tokenPassport:{
                ns8#account : p('kimbleSoapNetsuite.realm'),
                ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
                ns8#token: p('secure::kimbleSoapNetsuite.token'),
                ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
                ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
                ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2] },
                
       ns1#preferences :{
        ns2#ignoreReadOnlyFields  :true } ,
   
    ns3#searchPreferences  :{
        ns4#bodyFieldsOnly : true ,
        ns5#pageSize :50   }
 },
        
    
    soap#Body:{
        ns24#updateList @("xmlns:ns5":"urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6":"urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3":"urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns4":"urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9":"urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7":"urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8":"urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19":"urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns18":"urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns2":"urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns17":"urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16":"urn:customization_2020_1.setup.webservices.netsuite.com" ,
		"xmlns:ns15":"urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns14":"urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns13":"urn:bank_2020_1.transactions.webservices.netsuite.com" ,	
		"xmlns:ns12":"urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23":"urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11":"urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22":"urn:supplychain_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns10":"urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20":"urn:marketing_2020_1.lists.webservices.netsuite.com") : {
             ns24#record @("xsi:type":"ns6:Job","externalId" : vars.customerBillingSyncPayload.id , "xmlns:xsi" : "http://www.w3.org/2001/XMLSchema-instance"):{
                             
                
     //          customFieldList: {
		//				customField @( "xsi:type":"core:StringCustomFieldRef", "scriptId":"custbody_invoice_credit_body" ,"xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com"): {
			//				value: p('invoice.creditBody')
				//		}
					//},
                ns6#customFieldList:{
                	
                       customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custrecord_syncedtosfdc"):{ value : vars.customerBillingSyncPayload.syncToSfdc }
                        
}

}
}
}
}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="payloadXML" doc:id="47846299-75f7-47c4-92d6-cc3750a71bf2" >
			<ee:message />
			<ee:variables >
				<ee:set-variable variableName="soapHeader" ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
---
{
headers: payload.Envelope.Header


}]]></ee:set-variable>
				<ee:set-variable variableName="targetPayload" ><![CDATA[%dw 2.0
output application/xml
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger - Full payload " doc:id="14aa805b-2230-4fb0-9e5a-07d4b04722fb" message="#[payload]" />
		<try doc:name="Try" doc:id="e5646b33-0d0b-487a-b0f4-12e8c0001a4b" >
			<wsc:consume operation="${soap.wsdlUpdateOperation}" doc:name="Invoke-Customer Billing" doc:id="8c57708d-f453-429f-93b4-0fd18b1fb936" config-ref="Web_Service_Consumer_Config" target="responsePayload" >
				<wsc:message >
					<wsc:body ><![CDATA[#[payload.Envelope.Body]]]></wsc:body>
					<wsc:headers ><![CDATA[#[vars.soapHeader]]]></wsc:headers>
				</wsc:message>
			</wsc:consume>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="592e0906-81c4-48a7-95a2-26db4306903f" type="ANY" >
					<logger level="INFO" doc:name="Logger" doc:id="afd887dd-0250-436c-b695-c9014eb7f8c5" message="#[error.description]" />
					<ee:transform doc:name="Transform Message" doc:id="d9759926-f25c-40bf-9e10-0a3952d9fc96" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	customerBillingSchedule: {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "nsCustomerBillingSchedule",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<anypoint-mq:publish doc:name="Publish" doc:id="b461258a-845d-4c4c-848b-5fe99c51e878" config-ref="Anypoint_MQ_Config" destination="project-setup-DL-queue" >
						<anypoint-mq:properties ><![CDATA[#[output application/java
---
{
	objectName : Job
}]]]></anypoint-mq:properties>
					</anypoint-mq:publish>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="905dec8c-961d-43d4-a8b2-bae504ee6346" message="#[vars.responsePayload]" />
		<ee:transform doc:name="isSuccess" doc:id="70e63361-df71-4885-92af-b3327c0107e3">
			<ee:message />
			<ee:variables>
				<ee:set-variable variableName="isSuccess"><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	
	message :  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess
}]]></ee:set-variable>
				<ee:set-variable variableName="businessError"><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="2229c54f-3ad1-4e7b-8c6d-0dad54f5eeb0" >
			<when expression="#[vars.isSuccess.message == 'true']" >
				<ee:transform doc:name="Transform Message" doc:id="0aa685ed-15d4-473b-b234-07fa3ddf922c" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{
	internalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="8c2f38b5-caf0-4dbb-9ff9-591c53d1237f" message="#[payload]" />
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="ef7eb263-193a-4816-9d9b-235dc0b6e731" message="#[payload]" />
				<ee:transform doc:name="Transform Message" doc:id="bb26dd7f-1244-4126-8083-7b01ace0a83e" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	customerBillingSchedule: {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "nsCustomerBillingSchedule",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="a0aecba8-cab4-42e3-82d4-9d6fb89cac9f" />
			</otherwise>
		</choice>
		<flow-ref doc:name="log-after-outbound-request" doc:id="0c3c034a-b4e6-45b3-9a5b-48a067d3e796" name="log-after-outbound-request" />
	</sub-flow>
	
	</mule>
