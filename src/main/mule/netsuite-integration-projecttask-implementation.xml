<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd">
	
	
		
	<http:request-config name="HTTP_Request_configuration" doc:name="HTTP Request configuration" doc:id="e1aeb3b3-19af-4564-8b6e-ae62adfabaa3">
		<http:request-connection protocol="HTTPS"/>
	</http:request-config>
	<sub-flow
		name="ProjectTask-Implementation"
		doc:id="130840c3-4a62-41bb-84c8-3f2e6ab613e8">
		<set-variable value="#[payload.task]" doc:name="taskPayload"
			doc:id="92057468-7a08-4207-9e4a-9819585af689"
			variableName="taskPayload" mimeType="application/json" />
		<flow-ref doc:name="oauth-header-generator-soapHeader"
			doc:id="abad57fd-6b31-46b4-8c80-f1017260fb84"
			name="oauth-header-generator-soapHeader" />
		<logger level="INFO" doc:name="Logger" doc:id="62196025-e7a8-49eb-b063-e6588a2840bd" category="@@@@@@@@OAuth Header Value@@@@@@@@@@@@" message="#[vars.oAuthHeaderFinal]"/>
		<ee:transform doc:name="requestPayload"
			doc:id="931d7eb3-7f83-4f23-b468-2dabbabaf448">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:scheduling_2020_1.activities.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com



---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
    soap#Envelope @("xmlns:S":"http://schemas.xmlsoap.org/soap/envelope/"): 
    {
              soap#Header:{
            urn#tokenPassport:{
                ns8#account : p('kimbleSoapNetsuite.realm'),
                ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
                ns8#token: p('secure::kimbleSoapNetsuite.token'),
                ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
                ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
                ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2] },
                
       ns1#preferences :{
        ns2#ignoreReadOnlyFields  :true } ,
   
    ns1#searchPreferences  :{
        ns4#bodyFieldsOnly : true ,
        ns5#pageSize :50   }
 },
        
    
    soap#Body:{
        ns24#upsertList @("xmlns:ns5":"urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6":"urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3":"urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns4":"urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9":"urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7":"urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8":"urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19":"urn:supplychain_2020_1.lists.webservices.netsuite.com",
		"xmlns:ns18":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns2":"urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns17":"urn:marketing_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16":"urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns15":"urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns14":"urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns13":"urn:customization_2020_1.setup.webservices.netsuite.com" ,	
		"xmlns:ns12":"urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23":"urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11":"urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22":"urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns10":"urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21":"urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20":"urn:bank_2020_1.transactions.webservices.netsuite.com") : {
             ns24#record @("xsi:type":"ns3:ProjectTask","externalId" : vars.taskPayload.id , "xmlns:xsi" : "http://www.w3.org/2001/XMLSchema-instance"):{
                             
                
     //          customFieldList: {
		//				customField @( "xsi:type":"core:StringCustomFieldRef", "scriptId":"custbody_invoice_credit_body" ,"xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com"): {
			//				value: p('invoice.creditBody')
				//		}
					//},
					
				ns3#title: vars.taskPayload.name ,
                ns3#company @("internalId" : vars.taskPayload.nsProjectInternalId ) : "",				
				ns3#constraintType : vars.taskPayload.constraintTypeCode ,				
				ns3#startDate : vars.taskPayload.startDate ++ "T00:00:00.000Z"  ,
				ns3#status  : vars.taskPayload.statusCode ,
				
                ns3#customFieldList:{
                	
                        customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custevent_exportedfromsfdc"):{ value : "true"},
                        customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custevent_syncedtosfdc"):{ value : "false"},
                        
                        customField  @("xsi:type":"DateCustomFieldRef", "scriptId":"custevent_dropdeaddate"):{ value : vars.taskPayload.dropDeadDate ++ "T00:00:00.000Z" },
                        customField  @("xsi:type":"DateCustomFieldRef", "scriptId":"custevent_estimatedenddate"):{ value : vars.taskPayload.finishNoLaterThanDate ++ "T00:00:00.000Z" }
                                    
}

}
}
}
}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="payloadXML"
			doc:id="fff0d84b-5ed6-426f-b344-143a1a357f3b">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="soapHeader"><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
---
{
headers: payload.Envelope.Header


}]]></ee:set-variable>
				<ee:set-variable variableName="targetPayload"><![CDATA[%dw 2.0
output application/xml
---
payload]]></ee:set-variable>

			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger - Full payload "
			doc:id="24019308-cfb6-46bc-be0b-1b949ae89fb3" message="#[payload]" />
		<try doc:name="Try" doc:id="125c3065-673f-449e-9d26-603eff400b77">
			
	
			<wsc:consume doc:name="Invoke-ProjectTask"
				doc:id="10313adb-0e20-4e8f-a4fc-e5fa46d62620"
				config-ref="Web_Service_Consumer_Config"
				operation="${soap.wsdlUpsertOperation}" target="responsePayload">
			<wsc:message>
					<wsc:body><![CDATA[#[payload.Envelope.Body]]]></wsc:body>
					<wsc:headers><![CDATA[#[vars.soapHeader]]]></wsc:headers>
				</wsc:message>
			</wsc:consume>
			<error-handler>
				<on-error-propagate enableNotifications="true"
					logException="true" doc:name="On Error Propagate"
					doc:id="d2018621-38fc-44fd-8fcd-69d866e475f9" type="ANY">
					<logger level="INFO" doc:name="Logger" doc:id="49ce87a1-e28d-4170-8369-4eece807d1ac" message="#[error.description]"/>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="9eb092eb-b4fc-41a2-819a-53029e1a4ab2" message="#[vars.responsePayload]"/>
		<ee:transform doc:name="netsuiteInternalId" doc:id="f75daec6-617f-4382-bb9b-179ec6a73a22">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{
	netsuiteInternalId
: (if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null )  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId else (vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message)),
	recordID: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
	syncedToNS: true
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="rsp" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var successrsp = {
	netsuiteInternalId : vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId,
	recordID: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
	syncedToNS : true
}

var failurersp = {
	netsuiteInternalId: null,
	recordID: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ,
	errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
	syncedToNS: false
}
---

	 if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null) successrsp else failurersp 
]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="netsuiteInternalId" doc:id="60b2e736-54da-4d04-a1a9-24eb3eb08001" message="#[vars.rsp]"/>
	
	

		
	
	</sub-flow>
	<sub-flow name="projectTask-syncback-implementation" doc:id="dbad9b1c-b469-4efe-bbd3-e633e5f9c527" >
		<set-variable value="#[payload.nsProjectMilestone]" doc:name="projectTaskSyncPayload" doc:id="b430d96b-f5e0-45ae-8671-13569c015903" variableName="projectTaskSyncPayload" mimeType="application/json" />
		<flow-ref doc:name="oauth-header-generator-soapHeader" doc:id="fb3bc1dc-b935-4411-a508-9e49d35e3b2b" name="oauth-header-generator-soapHeader" />
		<logger level="INFO" doc:name="Logger" doc:id="f45a7054-cb7d-48cd-ac7d-1c6e14ecdacb" message="#[vars.oAuthHeaderFinal]" category="@@@@@@@@OAuth Header Value@@@@@@@@@@@@" />
		<ee:transform doc:name="requestPayload" doc:id="9c9a45c7-7e8a-464a-b5d0-97b7f6f770c1" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:messages.platform.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com


---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
    soap#Envelope @("xmlns:S":"http://schemas.xmlsoap.org/soap/envelope/",
    "xmlns:messages" : "urn:messages_2020_1.platform.webservices.netsuite.com",
     "xmlns:accountingLists":"urn:accounting_2020_1.lists.webservices.netsuite.com",
     "xmlns:employeesLists":"urn:employees_2020_1.lists.webservices.netsuite.com", 
     "xmlns:employeesTransactionsTypes":"urn:types.employees_2020_1.transactions.webservices.netsuite.com" ,
      "xmlns:demandplanningTransactions":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com",
       "xmlns:common":"urn:common_2020_1.platform.webservices.netsuite.com", 
       "xmlns:commonTypes":"urn:types.common_2020_1.platform.webservices.netsuite.com" , 
       "xmlns:accountingListsTypes": "urn:types.accounting_2020_1.lists.webservices.netsuite.com", 
       "xmlns:customizationSetup":"urn:customization_2020_1.setup.webservices.netsuite.com",
        "xmlns:inventoryTransactionsTypes": "urn:types.inventory_2020_1.transactions.webservices.netsuite.com",
        "xmlns:supportLists":"urn:support_2020_1.lists.webservices.netsuite.com",
        "xmlns:filecabinetDocuments":"urn:filecabinet_2020_1.documents.webservices.netsuite.com",
  "xmlns:bankTransactionsTypes":"urn:types.bank_2020_1.transactions.webservices.netsuite.com", 
  "xmlns:communicationGeneralTypes":"urn:types.communication_2020_1.general.webservices.netsuite.com", 
  "xmlns:customizationSetupTypes":"urn:types.customization_2020_1.setup.webservices.netsuite.com" , 
  "xmlns:supplychainListsTypes":"urn:types.supplychain_2020_1.lists.webservices.netsuite.com" ,
  "xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com",
  "xmlns:coreTypes":"urn:types.core_2020_1.platform.webservices.netsuite.com", 
 "xmlns:soapenc":"http://schemas.xmlsoap.org/soap/encoding/",
 "xmlns:supplychainLists":"urn:supplychain_2020_1.lists.webservices.netsuite.com", 
 "xmlns:demandplanningTransactionsTypes":"urn:types.demandplanning_2020_1.transactions.webservices.netsuite.com" ,
 "xmlns:websiteLists":"urn:website_2020_1.lists.webservices.netsuite.com",
 "xmlns:salesTransactions":"urn:sales_2020_1.transactions.webservices.netsuite.com",
 "xmlns:salesTransactionsTypes":"urn:types.sales_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:relationshipsLists":"urn:relationships_2020_1.lists.webservices.netsuite.com", 
 "xmlns:inventoryTransactions":"urn:inventory_2020_1.transactions.webservices.netsuite.com",
 "xmlns:employeesListsTypes":"urn:types.employees_2020_1.lists.webservices.netsuite.com",
 "xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance", 
 "xmlns:customersTransactions":"urn:customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivitiesTypes":"urn:types.scheduling_2020_1.activities.webservices.netsuite.com", 
 "xmlns:financialTransactions":"urn:financial_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:xsd":"http://www.w3.org/2001/XMLSchema", 
 "xmlns:relationshipsListsTypes":"urn:types.relationships_2020_1.lists.webservices.netsuite.com",
 "xmlns:employeesTransactions":"urn:employees_2020_1.transactions.webservices.netsuite.com",
 "xmlns:faults":"urn:faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:marketingListsTypes":"urn:types.marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:communicationGeneral":"urn:communication_2020_1.general.webservices.netsuite.com",
 "xmlns:faultsTypes":"urn:types.faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:supportListsTypes":"urn:types.support_2020_1.lists.webservices.netsuite.com",
 "xmlns:websiteListsTypes":"urn:types.website_2020_1.lists.webservices.netsuite.com",
 "xmlns:purchasesTransactions":"urn:purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:financialTransactionsTypes":"urn:types.financial_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivities":"urn:scheduling_2020_1.activities.webservices.netsuite.com",
 "xmlns:bankTransactions":"urn:bank_2020_1.transactions.webservices.netsuite.com",
 "xmlns:marketingLists":"urn:marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:customersTransactionsTypes":"urn:types.customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:purchasesTransactionsTypes":"urn:types.purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:generalTransactions":"urn:general_2020_1.transactions.webservices.netsuite.com",
 "xmlns:filecabinetDocumentsTypes":"urn:types.filecabinet_2020_1.documents.webservices.netsuite.com" ): {
              soap#Header:{
            urn#tokenPassport:{
                ns8#account : p('kimbleSoapNetsuite.realm'),
                ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
                ns8#token: p('secure::kimbleSoapNetsuite.token'),
                ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
                ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
                ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2] },
                
       ns1#preferences :{
        ns2#ignoreReadOnlyFields  :true } ,
   
    ns3#searchPreferences  :{
        ns4#bodyFieldsOnly : true ,
        ns5#pageSize :50   }
 },
        
    
    soap#Body:{
        ns24#updateList @("xmlns:ns5":"urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6":"urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3":"urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns4":"urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9":"urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7":"urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8":"urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19":"urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns18":"urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns2":"urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns17":"urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16":"urn:customization_2020_1.setup.webservices.netsuite.com" ,
		"xmlns:ns15":"urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns14":"urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns13":"urn:bank_2020_1.transactions.webservices.netsuite.com" ,	
		"xmlns:ns12":"urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23":"urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11":"urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22":"urn:supplychain_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns10":"urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20":"urn:marketing_2020_1.lists.webservices.netsuite.com") : {
             ns24#record @("xsi:type":"ns6:Job","externalId" : vars.projectTaskSyncPayload.id , "xmlns:xsi" : "http://www.w3.org/2001/XMLSchema-instance"):{
                             
                
     //          customFieldList: {
		//				customField @( "xsi:type":"core:StringCustomFieldRef", "scriptId":"custbody_invoice_credit_body" ,"xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com"): {
			//				value: p('invoice.creditBody')
				//		}
					//},
                ns6#customFieldList:{
                	
                       customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custevent_syncedtosfdc"):{ value : vars.projectTaskSyncPayload.syncToSfdc }
                        
}

}
}
}
}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="payloadXML" doc:id="bdae77ab-8903-4c2a-942c-48022f1228b6" >
			<ee:message />
			<ee:variables >
				<ee:set-variable variableName="soapHeader" ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
---
{
headers: payload.Envelope.Header


}]]></ee:set-variable>
				<ee:set-variable variableName="targetPayload" ><![CDATA[%dw 2.0
output application/xml
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger - Full payload " doc:id="1ad88f24-7d85-4580-8bb9-4f2cfb4f5597" message="#[payload]" />
		<try doc:name="Try" doc:id="6b667573-1452-4d70-93bf-343afc0fb6c5" >
			<wsc:consume operation="${soap.wsdlUpdateOperation}" doc:name="Invoke-ProjectTask" doc:id="3bbb3f6b-967f-4be6-9b75-48bba36e98a5" config-ref="Web_Service_Consumer_Config" target="responsePayload" >
				<wsc:message >
					<wsc:body ><![CDATA[#[payload.Envelope.Body]]]></wsc:body>
					<wsc:headers ><![CDATA[#[vars.soapHeader]]]></wsc:headers>
				</wsc:message>
			</wsc:consume>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="e67cc5cb-cd4c-4750-a45d-d5db727f84fe" type="ANY" >
					<logger level="INFO" doc:name="Logger" doc:id="59db4312-3321-4b37-8439-85a1832b5a2e" message="#[error.description]" />
					<ee:transform doc:name="Transform Message" doc:id="7d66a2b3-ccf6-494d-b14f-559333821eec" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	//errormessage
}]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<anypoint-mq:publish doc:name="Publish" doc:id="bc0b2010-f28a-43ab-9aa1-1f03ab174465" config-ref="Anypoint_MQ_Config" destination="project-setup-DL-queue" >
						<anypoint-mq:properties ><![CDATA[#[output application/java
---
{
	objectName : Job
}]]]></anypoint-mq:properties>
					</anypoint-mq:publish>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="95a175bc-b71a-43e2-a759-cbf8b459ebaf" message="#[vars.responsePayload]" />
		<ee:transform doc:name="isSuccess" doc:id="0a7c54f1-f664-4a0a-84f7-42f28c23e9c9" >
			<ee:message />
			<ee:variables >
				<ee:set-variable variableName="isSuccess" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	
	message :  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess
}]]></ee:set-variable>
				<ee:set-variable variableName="businessError" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="718437c3-297f-405f-b7f1-d37f212fce17" >
			<when expression="#[vars.isSuccess.message == 'true']" >
				<ee:transform doc:name="Transform Message" doc:id="c5176d40-c05a-4183-b2a1-b37729970867" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{
	internalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="e60408e6-e27f-4ce3-844b-c337e179fa0b" message="#[payload]" />
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="914da554-71a4-40a1-9711-4744d3caaf57" message="#[payload]" />
				<ee:transform doc:name="Transform Message" doc:id="c44839ef-38da-490f-8341-028bc8516bb9" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{
	//error message
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="ac4d411a-e89a-48e4-9d1e-3c36b0053858" />
			</otherwise>
		</choice>
		<flow-ref doc:name="log-after-outbound-request" doc:id="4e444bbb-6229-4492-8ced-416b9ba270db" name="log-after-outbound-request" />
	</sub-flow>
	
	
	
	</mule>
