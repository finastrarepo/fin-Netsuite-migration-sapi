<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq"
	xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd
http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd">
	
	
		
	<sub-flow
		name="salesorder-insert-Implementation"
		doc:id="130840c3-4a62-41bb-84c8-3f2e6ab613e8">
		<set-variable value="#[(salesOrder: payload.salesOrder) ++ (salesOrderItem: payload.salesOrderItem)]" doc:name="salesOrderPayload"
			doc:id="92057468-7a08-4207-9e4a-9819585af689"
			variableName="salesOrderPayload" mimeType="application/json" />
		<flow-ref doc:name="oauth-header-generator-soapHeader"
			doc:id="abad57fd-6b31-46b4-8c80-f1017260fb84"
			name="oauth-header-generator-soapHeader" />
		<logger level="INFO" doc:name="Logger" doc:id="62196025-e7a8-49eb-b063-e6588a2840bd" category="@@@@@@@@OAuth Header Value@@@@@@@@@@@@" message="#[vars.oAuthHeaderFinal]"/>
		<ee:transform doc:name="requestPayload"
			doc:id="931d7eb3-7f83-4f23-b468-2dabbabaf448">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:messages.platform.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns9 urn:sales_2020_1.transactions.webservices.netsuite.com
---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
	soap#Envelope @("xmlns:S": "http://schemas.xmlsoap.org/soap/envelope/",
    "xmlns:messages": "urn:messages_2020_1.platform.webservices.netsuite.com",
     "xmlns:accountingLists": "urn:accounting_2020_1.lists.webservices.netsuite.com",
     "xmlns:employeesLists": "urn:employees_2020_1.lists.webservices.netsuite.com", 
     "xmlns:employeesTransactionsTypes": "urn:types.employees_2020_1.transactions.webservices.netsuite.com" ,
      "xmlns:demandplanningTransactions": "urn:demandplanning_2020_1.transactions.webservices.netsuite.com",
       "xmlns:common": "urn:common_2020_1.platform.webservices.netsuite.com", 
       "xmlns:commonTypes": "urn:types.common_2020_1.platform.webservices.netsuite.com" , 
       "xmlns:accountingListsTypes": "urn:types.accounting_2020_1.lists.webservices.netsuite.com", 
       "xmlns:customizationSetup": "urn:customization_2020_1.setup.webservices.netsuite.com",
        "xmlns:inventoryTransactionsTypes": "urn:types.inventory_2020_1.transactions.webservices.netsuite.com",
        "xmlns:supportLists": "urn:support_2020_1.lists.webservices.netsuite.com",
        "xmlns:filecabinetDocuments": "urn:filecabinet_2020_1.documents.webservices.netsuite.com",
  "xmlns:bankTransactionsTypes": "urn:types.bank_2020_1.transactions.webservices.netsuite.com", 
  "xmlns:communicationGeneralTypes": "urn:types.communication_2020_1.general.webservices.netsuite.com", 
  "xmlns:customizationSetupTypes": "urn:types.customization_2020_1.setup.webservices.netsuite.com" , 
  "xmlns:supplychainListsTypes": "urn:types.supplychain_2020_1.lists.webservices.netsuite.com" ,
  "xmlns:core": "urn:core_2020_1.platform.webservices.netsuite.com",
  "xmlns:coreTypes": "urn:types.core_2020_1.platform.webservices.netsuite.com", 
 "xmlns:soapenc": "http://schemas.xmlsoap.org/soap/encoding/",
 "xmlns:supplychainLists": "urn:supplychain_2020_1.lists.webservices.netsuite.com", 
 "xmlns:demandplanningTransactionsTypes": "urn:types.demandplanning_2020_1.transactions.webservices.netsuite.com" ,
 "xmlns:websiteLists": "urn:website_2020_1.lists.webservices.netsuite.com",
 "xmlns:salesTransactions": "urn:sales_2020_1.transactions.webservices.netsuite.com",
 "xmlns:salesTransactionsTypes": "urn:types.sales_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:relationshipsLists": "urn:relationships_2020_1.lists.webservices.netsuite.com", 
 "xmlns:inventoryTransactions": "urn:inventory_2020_1.transactions.webservices.netsuite.com",
 "xmlns:employeesListsTypes": "urn:types.employees_2020_1.lists.webservices.netsuite.com",
 "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance", 
 "xmlns:customersTransactions": "urn:customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivitiesTypes": "urn:types.scheduling_2020_1.activities.webservices.netsuite.com", 
 "xmlns:financialTransactions": "urn:financial_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:xsd": "http://www.w3.org/2001/XMLSchema", 
 "xmlns:relationshipsListsTypes": "urn:types.relationships_2020_1.lists.webservices.netsuite.com",
 "xmlns:employeesTransactions": "urn:employees_2020_1.transactions.webservices.netsuite.com",
 "xmlns:faults": "urn:faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:marketingListsTypes": "urn:types.marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:communicationGeneral": "urn:communication_2020_1.general.webservices.netsuite.com",
 "xmlns:faultsTypes": "urn:types.faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:supportListsTypes": "urn:types.support_2020_1.lists.webservices.netsuite.com",
 "xmlns:websiteListsTypes": "urn:types.website_2020_1.lists.webservices.netsuite.com",
 "xmlns:purchasesTransactions": "urn:purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:financialTransactionsTypes": "urn:types.financial_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivities": "urn:scheduling_2020_1.activities.webservices.netsuite.com",
 "xmlns:bankTransactions": "urn:bank_2020_1.transactions.webservices.netsuite.com",
 "xmlns:marketingLists": "urn:marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:customersTransactionsTypes": "urn:types.customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:purchasesTransactionsTypes": "urn:types.purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:generalTransactions": "urn:general_2020_1.transactions.webservices.netsuite.com",
 "xmlns:filecabinetDocumentsTypes": "urn:types.filecabinet_2020_1.documents.webservices.netsuite.com"): {
		soap#Header: {
			urn#tokenPassport: {
				ns8#account: p('kimbleSoapNetsuite.realm'),
				ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
				ns8#token: p('secure::kimbleSoapNetsuite.token'),
				ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
				ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
				ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2]
			},
			ns1#preferences: {
				ns2#ignoreReadOnlyFields: true
			},
			ns3#searchPreferences: {
				ns4#bodyFieldsOnly: true,
				ns5#pageSize: 50
			}
		},
		soap#Body: {
			ns24#addList @("xmlns:ns5": "urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6": "urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3": "urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns4": "urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9": "urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7": "urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8": "urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19": "urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns18": "urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns2": "urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns17": "urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16": "urn:customization_2020_1.setup.webservices.netsuite.com" ,
		"xmlns:ns15": "urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns14": "urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns13": "urn:bank_2020_1.transactions.webservices.netsuite.com" ,	
		"xmlns:ns12": "urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23": "urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11": "urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22": "urn:supplychain_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns10": "urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21": "urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20": "urn:marketing_2020_1.lists.webservices.netsuite.com"): {
				ns24#record @("xsi:type": "ns9:SalesOrder","externalId": vars.salesOrderPayload.salesOrder[0].salesOrder18CharacterId , "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance"): {
					// customFieldList: {
					// customField @( "xsi:type":"core:StringCustomFieldRef", "scriptId":"custbody_invoice_credit_body" ,"xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com"): {
					// value: p('invoice.creditBody')
					// }
					// },
					ns9#customForm @("internalId": vars.salesOrderPayload.salesOrder[0].nsFormId): "",
					ns9#entity @("internalId": vars.salesOrderPayload.salesOrder[0].billToCustomerInternalId): "",
					ns9#currency @("internalId": vars.salesOrderPayload.salesOrder[0].nsCurrencyInternalId): "",
					ns9#drAccount @("internalId": vars.salesOrderPayload.salesOrder[0].nsDeferredRevRecAccInternalId): "",
					ns9#tranDate: if ( vars.salesOrderPayload.salesOrder[0].orderDate !=null ) (vars.salesOrderPayload.salesOrder[0].orderDate ++ "T00:00:00.000Z") else "",
					ns9#orderStatus @("internalId": vars.salesOrderPayload.salesOrder[0].orderStatusCode): "",
					ns9#startDate: if ( vars.salesOrderPayload.salesOrder[0].orderStartDate != null ) (vars.salesOrderPayload.salesOrder[0].orderStartDate ++ "T00:00:00.000Z") else "",
					ns9#endDate: if ( vars.salesOrderPayload.salesOrder[0].orderEndDate !=null ) (vars.salesOrderPayload.salesOrder[0].orderEndDate ++ "T00:00:00.000Z") else "",
					ns9#otherRefNum: vars.salesOrderPayload.salesOrder[0].customerPONumber,
					ns9#memo: vars.salesOrderPayload.salesOrder[0].memo,
					ns9#fax: vars.salesOrderPayload.salesOrder[0].nsFaxNumber,
					ns9#email: vars.salesOrderPayload.salesOrder[0].nsBillToEmail,
					ns9#billAddressList @("internalId": vars.salesOrderPayload.salesOrder[0].nsBillingAddressInternalId): "",
					ns9#shipAddressList @("internalId": vars.salesOrderPayload.salesOrder[0].nsTaxationAddressInternalId): "",
					ns9#revRecOnRevCommitment: vars.salesOrderPayload.salesOrder[0].nsRevRecOnCommit,
					ns9#class @("internalId": vars.salesOrderPayload.salesOrder[0].nsProductAnalysisInternalId): "",
					ns9#department @("internalId": vars.salesOrderPayload.salesOrder[0].nsCostCentreInternalId): "",
					ns9#location @("internalId": vars.salesOrderPayload.salesOrder[0].nsFinanceRegionInternalId): "",
					ns9#terms @("internalId": vars.salesOrderPayload.salesOrder[0].nsTermInternalId): "",
					ns9#tranIsVsoeBundle: vars.salesOrderPayload.salesOrder[0].transactionIsVSOEBundle,
					ns9#vsoeAutoCalc: vars.salesOrderPayload.salesOrder[0].nsAutoCalculateVSOEAllocation,
					ns9#itemList: vars.salesOrderPayload.salesOrderItem map(item,value) -> {
						ns9#item: {
							ns9#item  @("internalId": item.nsItemInternalId): "",
							ns9#quantity: item.quantity,
							ns9#description: item.description,
							ns9#rate: item.rate,
							ns9#department: item.psCostCentreInternalId,
							ns9#revRecSchedule  @("internalId": item.revRecScheduleInternalId): "",
							ns9#revRecStartDate: if ( item.revRecStartDate != null ) (item.revRecStartDate ++ "T00:00:00.000Z") else null,
							ns9#revRecEndDate: if ( item.revRecStartDate != null ) (item.revRecStartDate ++ "T00:00:00.000Z") else null,
							ns9#line: item.line,
							ns9#vsoePrice: item.vsoePrice,
							ns9#vsoeAllocation: item.vsoeAllocationAmount,
							ns9#vsoeDelivered: item.vsoeDelivered,
							ns9#customFieldList: {
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_oa_rev_rec_rule"): {
									value: item.openairRevRecRuleInternalId
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_oa_billing_rule_type"): {
									value: item.openairBillingRuleInternalId
								},
								customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custcol_softwaredelivered"): {
									value: item.softwareDelivered
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_ga"): {
									value: item.nonGA
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_3pp_rate"): {
									value: item.thirdpartyCostsPOCcy
								},
								customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custcol_3pp_rate_currency"): {
									value @("internalId": item.thirdPartyPOCurrencyInternalId): ""
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_mis_ps_carveout_amt"): {
									value: item.fairValueAdjustment
								},
								customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custcol_misysvaluelist"): {
									value @("internalId": item.listValue): ""
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_misysdiscount"): {
									value: item.discount
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_misysrevenuecontracted"): {
									value: item.salesPrice
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_misysvaluefair"): {
									value: item.fairValue
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_internalcost"): {
									value: item.internalCosts
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_misys3rdcontractorcost"): {
									value: item.thirdPartyContractorCostdealccy
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_misys3rdpartycost"): {
									value: item.thirdPartyCostsdealcurrency
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_misysrembursablecostrecvalue"): {
									value: item.reimbursableCostsRecoveryValue
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_misysrembursablecostestimate"): {
									value: item.reimbursableCostsEstimate
								},
								customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custcol_misystotalperdiemvaluelist"): {
									value @("internalId": item.perDiemListValue): ""
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_misystotalperdiemvaluecont"): {
									value: item.perDiemContractedValue
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_misysunrecoverablecost"): {
									value: item.unrecoverableCosts
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_profitonserviceincldcarveout"): {
									value: item.profitonServicesincCarveOut
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_profitonservice"): {
									value: item.profitonService
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_misyschargeablehours"): {
									value: item.totalChargeableHours
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_misyscontractorhours"): {
									value: item.totalNumberOfContractorHours
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_misysnonbillablehours"): {
									value: item.totalNumberOfNonBillableHours
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_misystravelhour"): {
									value: item.totalNumberOfTravelHours
								},
								customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custcol_vendor_billing_schedule_3pp"): {
									valu @("internalId": item.nsVendorBillingScheduleInternalId): ""
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_3pp_asset_location"): {
									value: item.location
								},
								customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custcol_3pp_vendor_bsch_trigger"): {
									value @("internalId": item.vendorBSchTriggerInternalId): ""
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_totalhours"): {
									value: item.totalHours
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_totalbillablehours"): {
									value: item.totalBillableHours
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_totalcost"): {
									value: item.totalCost
								},
								customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custcol_create_3pp_po"): {
									value @("internalId": item.create3PPEvent): ""
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_licence_basis"): {
									value: item.licenseMetric
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_3pp_asset_environ"): {
									value: item.environment
								},
								customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custcol_license_band_quantity"): {
									value: item.licenceband
								},
								customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custcol_arm_fair_value2"): {
									value @("internalId": item.fairValue): ""
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_arm_vsoedelivered"): {
									value: item.softwareDelivered
								},
								customField  @("xsi:type": "DateCustomFieldRef", "scriptId": "custcol_arm_end_date"): {
									value: if ( item.revRecEndDate != null ) (item.revRecEndDate ++ "T00:00:00.000Z") else ""
								},
								customField  @("xsi:type": "DateCustomFieldRef", "scriptId": "custcol_arm_start_date"): {
									value: if ( item.revRecStartDate != null ) (item.revRecStartDate ++ "T00:00:00.000Z") else ""
								},
								customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custcol_ra_revrec_sched"): {
									value @("internalId": item.revRecScheduleInternalId): ""
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_vsoeallocation"): {
									value: item.fairValue
								},
								customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custcol_us_tax_type_code"): {
									value @("internalId": item.taxCode): ""
								}
							}
						}
					},
					ns9#customFieldList: {
						customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custbody_delivery_address"): {
							value: vars.salesOrderPayload.salesOrder[0].altDeliveryAddress
						},
						customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custbody_exportedfromsfdc"): {
							value: "true"
						},
						customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custbody_syncedtosfdc"): {
							value: "false"
						},
						customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custbody_transactioncategory"): {
							value @("internalId": vars.salesOrderPayload.salesOrder[0].orderTypeInternalId): ""
						},
						customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custbody_porequired"): {
							value: vars.salesOrderPayload.salesOrder[0].poRequired
						},
						customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custbody_misysref"): {
							value: vars.salesOrderPayload.salesOrder[0].opportunityNumber
						},
						customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custbody_invoice_credit_body"): {
							value @("internalId": vars.salesOrderPayload.salesOrder[0].invoiceCreditBodyInternalId): ""
						},
						customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custbodycustbody_creditcontroller"): {
							value @("internalId": vars.salesOrderPayload.salesOrder[0].soCreditControllerInternalId): ""
						},
						customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custbody_contractno"): {
							value: vars.salesOrderPayload.salesOrder[0].contractNumber
						},
						customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custbodycustbody_cashaccounting"): {
							value: vars.salesOrderPayload.salesOrder[0].nsCashAccounting
						},
						customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custbody_billing_contact"): {
							value @("internalId": vars.salesOrderPayload.salesOrder[0].nsBillingContactInternalId): ""
						},
						customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custbody_docmemo"): {
							value: vars.salesOrderPayload.salesOrder[0].documentMemo
						},
						customField  @("xsi:type": "DateCustomFieldRef", "scriptId": "custbody_contractdate"): {
							value: if ( vars.salesOrderPayload.salesOrder[0].nsContractDate !=null ) (vars.salesOrderPayload.salesOrder[0].nsContractDate ++ "T00:00:00.000Z") else ""
						},
						customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custbody_mys_tax_combo_chck"): {
							value: vars.salesOrderPayload.salesOrder[0].taxComboCheck
						},
						customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custbody_sfdc_billing_group_id"): {
							value: vars.salesOrderPayload.salesOrder[0].billingGroup
						},
						customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custbody_ps_practice_name"): {
							value: vars.salesOrderPayload.salesOrder[0].psPractiseNameInternalId
						},
						customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custbody_ps_practice_unique_code"): {
							value: vars.salesOrderPayload.salesOrder[0].psPractiseUniqueCode
						},
						customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custbody_misyssalestype_str"): {
							value: vars.salesOrderPayload.salesOrder[0].opportunityDealType
						},
						customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_3pp_legacy_ref"): {
							value: vars.salesOrderPayload.salesOrder[0].opportunityNumberText
						},
					// customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custbody_misyssalestype_str"): {
					// value: vars.salesOrderPayload.salesOrder[0].opportunityDealType
					// }
					}
				}
			}
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="payloadXML"
			doc:id="fff0d84b-5ed6-426f-b344-143a1a357f3b">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="soapHeader"><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
---
{
headers: payload.Envelope.Header


}]]></ee:set-variable>
				<ee:set-variable variableName="targetPayload"><![CDATA[%dw 2.0
output application/xml
---
payload]]></ee:set-variable>

			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger - Full payload "
			doc:id="24019308-cfb6-46bc-be0b-1b949ae89fb3" message="#[payload]" />
		<try doc:name="Try" doc:id="125c3065-673f-449e-9d26-603eff400b77">
			
	
			<wsc:consume doc:name="Invoke-SalesOrder"
				doc:id="10313adb-0e20-4e8f-a4fc-e5fa46d62620"
				config-ref="Web_Service_Consumer_Config"
				operation="${soap.wsdlAddOperation}" target="responsePayload">
			<wsc:message>
					<wsc:body><![CDATA[#[payload.Envelope.Body]]]></wsc:body>
					<wsc:headers><![CDATA[#[vars.soapHeader]]]></wsc:headers>
				</wsc:message>
			</wsc:consume>
			<error-handler>
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="bbc3c7ab-cd88-45ba-9253-782485b83a62" type="ANY" >
										<logger level="INFO" doc:name="Logger" doc:id="3539eb18-ce18-4752-b8f2-60a8c9bbd506" message="#[error.description]"/>
					<ee:transform doc:name="Transform Message" doc:id="21031be3-6a94-40cd-8847-eadac616e708" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	salesOrder : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "salesOrder",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<anypoint-mq:publish doc:name="Publish_to_ErrorQueue" doc:id="3285439b-6e43-4b88-9dcc-13f7597d69b6" config-ref="Anypoint_MQ_Config" destination="project-setup-DL-queue">
						<anypoint-mq:properties><![CDATA[#[output application/java
---
{
	"correlationId" : vars.inputProperties.correlationId,
	"operationType" : vars.inputProperties.operationType,
	"apiName" : "fin-netsuite-finance-ent-sapi",
	"apiVersion" : "v1.0",
	"objectName" : "salesOrder",
	"queueName" : p('secure::mq.publish-name')
}]]]></anypoint-mq:properties>
					</anypoint-mq:publish>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="9eb092eb-b4fc-41a2-819a-53029e1a4ab2" message="#[vars.responsePayload]"/>
		<ee:transform doc:name="netsuiteInternalId" doc:id="f75daec6-617f-4382-bb9b-179ec6a73a22">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{
	recordID: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@externalId,
	netsuiteInternalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="netsuiteInternalId" doc:id="60b2e736-54da-4d04-a1a9-24eb3eb08001" message="#[payload]"/>
	
	<logger level="INFO" doc:name="Logger for error code" doc:id="9fcd7b22-fc2c-4a9e-9349-843ec1d4ad02" message="#[%dw 2.0
output application/json
---
{
       (code: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.code) if (vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.code != null)
       
}]"/>
		<logger level="INFO" doc:name="Logger" doc:id="7eed8b5f-1fae-4153-aafc-7d4ebf3021be" message='#[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]'/>
		<ee:transform doc:name="netsuiteInternalId" doc:id="d16274f8-6a3c-41e5-9cbc-643d51b65000">
			<ee:message>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="isSuccess" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	
	message :  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess
}]]></ee:set-variable>
				<ee:set-variable variableName="businessError" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="9f0dce93-9754-4edb-b817-e3e3bf3ea175" >
			<when expression="#[vars.isSuccess.message == 'true']">
				<flow-ref doc:name="salesOrder_rest_call_" doc:id="c4ca41c9-b02d-4605-8756-6a344850cf5e" name="salesOrder_rest_call_" />
				<ee:transform doc:name="Transform Message" doc:id="4e92bc6c-3c64-4b69-9a5d-4e377a727861" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{
	salesOrder:
	{
	externalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@externalId,
	internalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true,
	tranId : vars.restRsp.tranId,
	exchangeRate: vars.restRsp.exchangeRate
}}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger- BEFORE MQ" doc:id="82ab799b-5f51-4f05-b6c3-e8b2f1422280" message="#[payload]" />
				<anypoint-mq:publish doc:name="Publish+to_ResponseQueue" doc:id="21d73937-60e4-49f3-9bc0-4886867e1f24" config-ref="Anypoint_MQ_Config" destination="${secure::mq.publish-name}">
			<anypoint-mq:properties ><![CDATA[#[output application/java
---
{
	"correlationId" : vars.inputProperties.correlationId,
	"operationType" : vars.inputProperties.operationType,
	"apiName" : "fin-netsuite-finance-ent-sapi",
	"apiVersion" : "v1.0",
	"objectName" : "salesOrder",
	"queueName" : p('secure::mq.publish-name')
}]]]></anypoint-mq:properties>
		</anypoint-mq:publish>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="b39a020c-737f-4272-9157-d02ab347c2dd" message="#[payload]"/>
				<ee:transform doc:name="Transform Message" doc:id="d9c31860-901a-44d6-95a5-7b8ecef530cb" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	salesOrder : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "salesOrder",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="0d82028a-f207-488f-bb7c-e40daaac2c97" />
			</otherwise>
		</choice>
		<flow-ref doc:name="log-payload" doc:id="a74b11f5-1da6-47ef-b9fd-30411f6ae926" name="log-payload"/>
	
	</sub-flow>
	<sub-flow name="salesorder_update_impl" doc:id="eadc5b59-d711-4a8e-8e29-95ea66b0eb5e" >
		<set-variable value="#[(salesOrder: payload.salesOrder) ++ (salesOrderItem: payload.salesOrderItem)]" doc:name="salesOrderUpdatePayload" doc:id="31143223-882a-41b6-8403-ec051a318886" variableName="salesOrderUpdatePayload" mimeType="application/json" />
		<logger level="INFO" doc:name="Print salesOrderUpdatePayload" doc:id="612dbd84-dc3b-4a35-948f-20d7a1916bd9" message="#[vars.salesOrderUpdatePayload]"/>
		<flow-ref doc:name="oauth-header-generator-soapHeader" doc:id="ad02da92-3764-42b9-88cf-72d2352ae1ca" name="oauth-header-generator-soapHeader" />
		<logger level="INFO" doc:name="Logger" doc:id="5a93ea75-f89f-4eec-bab4-88dd214728bc" message="#[vars.oAuthHeaderFinal]" category="@@@@@@@@OAuth Header Value@@@@@@@@@@@@" />
		<choice doc:name="Choice" doc:id="b8744b40-9d57-49a8-8d34-fd22c23990e1" >
			<when expression="#[vars.salesOrderUpdatePayload.salesOrder[0].primarySalesCheck == 'true']">
				<ee:transform doc:name="sOPrimaryrequestPayload" doc:id="4345171d-9091-40b6-918d-d4a08fd201ae">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:messages.platform.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns9 urn:sales_2020_1.transactions.webservices.netsuite.com
---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
	soap#Envelope @("xmlns:S": "http://schemas.xmlsoap.org/soap/envelope/",
    "xmlns:messages": "urn:messages_2020_1.platform.webservices.netsuite.com",
     "xmlns:accountingLists": "urn:accounting_2020_1.lists.webservices.netsuite.com",
     "xmlns:employeesLists": "urn:employees_2020_1.lists.webservices.netsuite.com", 
     "xmlns:employeesTransactionsTypes": "urn:types.employees_2020_1.transactions.webservices.netsuite.com" ,
      "xmlns:demandplanningTransactions": "urn:demandplanning_2020_1.transactions.webservices.netsuite.com",
       "xmlns:common": "urn:common_2020_1.platform.webservices.netsuite.com", 
       "xmlns:commonTypes": "urn:types.common_2020_1.platform.webservices.netsuite.com" , 
       "xmlns:accountingListsTypes": "urn:types.accounting_2020_1.lists.webservices.netsuite.com", 
       "xmlns:customizationSetup": "urn:customization_2020_1.setup.webservices.netsuite.com",
        "xmlns:inventoryTransactionsTypes": "urn:types.inventory_2020_1.transactions.webservices.netsuite.com",
        "xmlns:supportLists": "urn:support_2020_1.lists.webservices.netsuite.com",
        "xmlns:filecabinetDocuments": "urn:filecabinet_2020_1.documents.webservices.netsuite.com",
  "xmlns:bankTransactionsTypes": "urn:types.bank_2020_1.transactions.webservices.netsuite.com", 
  "xmlns:communicationGeneralTypes": "urn:types.communication_2020_1.general.webservices.netsuite.com", 
  "xmlns:customizationSetupTypes": "urn:types.customization_2020_1.setup.webservices.netsuite.com" , 
  "xmlns:supplychainListsTypes": "urn:types.supplychain_2020_1.lists.webservices.netsuite.com" ,
  "xmlns:core": "urn:core_2020_1.platform.webservices.netsuite.com",
  "xmlns:coreTypes": "urn:types.core_2020_1.platform.webservices.netsuite.com", 
 "xmlns:soapenc": "http://schemas.xmlsoap.org/soap/encoding/",
 "xmlns:supplychainLists": "urn:supplychain_2020_1.lists.webservices.netsuite.com", 
 "xmlns:demandplanningTransactionsTypes": "urn:types.demandplanning_2020_1.transactions.webservices.netsuite.com" ,
 "xmlns:websiteLists": "urn:website_2020_1.lists.webservices.netsuite.com",
 "xmlns:salesTransactions": "urn:sales_2020_1.transactions.webservices.netsuite.com",
 "xmlns:salesTransactionsTypes": "urn:types.sales_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:relationshipsLists": "urn:relationships_2020_1.lists.webservices.netsuite.com", 
 "xmlns:inventoryTransactions": "urn:inventory_2020_1.transactions.webservices.netsuite.com",
 "xmlns:employeesListsTypes": "urn:types.employees_2020_1.lists.webservices.netsuite.com",
 "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance", 
 "xmlns:customersTransactions": "urn:customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivitiesTypes": "urn:types.scheduling_2020_1.activities.webservices.netsuite.com", 
 "xmlns:financialTransactions": "urn:financial_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:xsd": "http://www.w3.org/2001/XMLSchema", 
 "xmlns:relationshipsListsTypes": "urn:types.relationships_2020_1.lists.webservices.netsuite.com",
 "xmlns:employeesTransactions": "urn:employees_2020_1.transactions.webservices.netsuite.com",
 "xmlns:faults": "urn:faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:marketingListsTypes": "urn:types.marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:communicationGeneral": "urn:communication_2020_1.general.webservices.netsuite.com",
 "xmlns:faultsTypes": "urn:types.faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:supportListsTypes": "urn:types.support_2020_1.lists.webservices.netsuite.com",
 "xmlns:websiteListsTypes": "urn:types.website_2020_1.lists.webservices.netsuite.com",
 "xmlns:purchasesTransactions": "urn:purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:financialTransactionsTypes": "urn:types.financial_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivities": "urn:scheduling_2020_1.activities.webservices.netsuite.com",
 "xmlns:bankTransactions": "urn:bank_2020_1.transactions.webservices.netsuite.com",
 "xmlns:marketingLists": "urn:marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:customersTransactionsTypes": "urn:types.customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:purchasesTransactionsTypes": "urn:types.purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:generalTransactions": "urn:general_2020_1.transactions.webservices.netsuite.com",
 "xmlns:filecabinetDocumentsTypes": "urn:types.filecabinet_2020_1.documents.webservices.netsuite.com"): {
		soap#Header: {
			urn#tokenPassport: {
				ns8#account: p('kimbleSoapNetsuite.realm'),
				ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
				ns8#token: p('secure::kimbleSoapNetsuite.token'),
				ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
				ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
				ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2]
			},
			ns1#preferences: {
				ns2#ignoreReadOnlyFields: true
			},
			ns3#searchPreferences: {
				ns4#bodyFieldsOnly: true,
				ns5#pageSize: 50
			}
		},
		soap#Body: {
			ns24#updateList @("xmlns:ns5": "urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6": "urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3": "urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns4": "urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9": "urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7": "urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8": "urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19": "urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns18": "urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns2": "urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns17": "urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16": "urn:customization_2020_1.setup.webservices.netsuite.com" ,
		"xmlns:ns15": "urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns14": "urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns13": "urn:bank_2020_1.transactions.webservices.netsuite.com" ,	
		"xmlns:ns12": "urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23": "urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11": "urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22": "urn:supplychain_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns10": "urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21": "urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20": "urn:marketing_2020_1.lists.webservices.netsuite.com"): {
				ns24#record @("xsi:type": "ns9:SalesOrder","externalId": vars.salesOrderUpdatePayload.salesOrder[0].id , "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance"): {
					
						ns9#customFieldList: 
						{
							customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "employee"): {
								value  @("internalId": vars.salesOrderUpdatePayload.salesOrder[0].primarySalesPersonInternalId ) : ""
							},
							customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "salesrole"): {
								value @("internalId": vars.salesOrderUpdatePayload.salesOrder[0].salesRoleInternalId): ""
							},
							customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "isprimary"): {
								value: vars.salesOrderUpdatePayload.salesOrder[0].isPrimary
							},
							customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "contribution"): {
								value : vars.salesOrderUpdatePayload.salesOrder[0].contribution
							}
						}
					
				}
			}
		}
	}
	
}

]]></ee:set-payload>
			</ee:message>
		</ee:transform>
			</when>
			<otherwise >
				<ee:transform doc:name="sOrequestPayload" doc:id="d9694ce7-20f9-4843-a5f5-838a6009ca8d" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:messages.platform.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns9 urn:sales_2020_1.transactions.webservices.netsuite.com
---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
	soap#Envelope @("xmlns:S": "http://schemas.xmlsoap.org/soap/envelope/",
    "xmlns:messages": "urn:messages_2020_1.platform.webservices.netsuite.com",
     "xmlns:accountingLists": "urn:accounting_2020_1.lists.webservices.netsuite.com",
     "xmlns:employeesLists": "urn:employees_2020_1.lists.webservices.netsuite.com", 
     "xmlns:employeesTransactionsTypes": "urn:types.employees_2020_1.transactions.webservices.netsuite.com" ,
      "xmlns:demandplanningTransactions": "urn:demandplanning_2020_1.transactions.webservices.netsuite.com",
       "xmlns:common": "urn:common_2020_1.platform.webservices.netsuite.com", 
       "xmlns:commonTypes": "urn:types.common_2020_1.platform.webservices.netsuite.com" , 
       "xmlns:accountingListsTypes": "urn:types.accounting_2020_1.lists.webservices.netsuite.com", 
       "xmlns:customizationSetup": "urn:customization_2020_1.setup.webservices.netsuite.com",
        "xmlns:inventoryTransactionsTypes": "urn:types.inventory_2020_1.transactions.webservices.netsuite.com",
        "xmlns:supportLists": "urn:support_2020_1.lists.webservices.netsuite.com",
        "xmlns:filecabinetDocuments": "urn:filecabinet_2020_1.documents.webservices.netsuite.com",
  "xmlns:bankTransactionsTypes": "urn:types.bank_2020_1.transactions.webservices.netsuite.com", 
  "xmlns:communicationGeneralTypes": "urn:types.communication_2020_1.general.webservices.netsuite.com", 
  "xmlns:customizationSetupTypes": "urn:types.customization_2020_1.setup.webservices.netsuite.com" , 
  "xmlns:supplychainListsTypes": "urn:types.supplychain_2020_1.lists.webservices.netsuite.com" ,
  "xmlns:core": "urn:core_2020_1.platform.webservices.netsuite.com",
  "xmlns:coreTypes": "urn:types.core_2020_1.platform.webservices.netsuite.com", 
 "xmlns:soapenc": "http://schemas.xmlsoap.org/soap/encoding/",
 "xmlns:supplychainLists": "urn:supplychain_2020_1.lists.webservices.netsuite.com", 
 "xmlns:demandplanningTransactionsTypes": "urn:types.demandplanning_2020_1.transactions.webservices.netsuite.com" ,
 "xmlns:websiteLists": "urn:website_2020_1.lists.webservices.netsuite.com",
 "xmlns:salesTransactions": "urn:sales_2020_1.transactions.webservices.netsuite.com",
 "xmlns:salesTransactionsTypes": "urn:types.sales_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:relationshipsLists": "urn:relationships_2020_1.lists.webservices.netsuite.com", 
 "xmlns:inventoryTransactions": "urn:inventory_2020_1.transactions.webservices.netsuite.com",
 "xmlns:employeesListsTypes": "urn:types.employees_2020_1.lists.webservices.netsuite.com",
 "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance", 
 "xmlns:customersTransactions": "urn:customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivitiesTypes": "urn:types.scheduling_2020_1.activities.webservices.netsuite.com", 
 "xmlns:financialTransactions": "urn:financial_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:xsd": "http://www.w3.org/2001/XMLSchema", 
 "xmlns:relationshipsListsTypes": "urn:types.relationships_2020_1.lists.webservices.netsuite.com",
 "xmlns:employeesTransactions": "urn:employees_2020_1.transactions.webservices.netsuite.com",
 "xmlns:faults": "urn:faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:marketingListsTypes": "urn:types.marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:communicationGeneral": "urn:communication_2020_1.general.webservices.netsuite.com",
 "xmlns:faultsTypes": "urn:types.faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:supportListsTypes": "urn:types.support_2020_1.lists.webservices.netsuite.com",
 "xmlns:websiteListsTypes": "urn:types.website_2020_1.lists.webservices.netsuite.com",
 "xmlns:purchasesTransactions": "urn:purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:financialTransactionsTypes": "urn:types.financial_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivities": "urn:scheduling_2020_1.activities.webservices.netsuite.com",
 "xmlns:bankTransactions": "urn:bank_2020_1.transactions.webservices.netsuite.com",
 "xmlns:marketingLists": "urn:marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:customersTransactionsTypes": "urn:types.customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:purchasesTransactionsTypes": "urn:types.purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:generalTransactions": "urn:general_2020_1.transactions.webservices.netsuite.com",
 "xmlns:filecabinetDocumentsTypes": "urn:types.filecabinet_2020_1.documents.webservices.netsuite.com"): {
		soap#Header: {
			urn#tokenPassport: {
				ns8#account: p('kimbleSoapNetsuite.realm'),
				ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
				ns8#token: p('secure::kimbleSoapNetsuite.token'),
				ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
				ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
				ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2]
			},
			ns1#preferences: {
				ns2#ignoreReadOnlyFields: true
			},
			ns3#searchPreferences: {
				ns4#bodyFieldsOnly: true,
				ns5#pageSize: 50
			}
		},
		soap#Body: {
			ns24#updateList @("xmlns:ns5": "urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6": "urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3": "urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns4": "urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9": "urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7": "urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8": "urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19": "urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns18": "urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns2": "urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns17": "urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16": "urn:customization_2020_1.setup.webservices.netsuite.com" ,
		"xmlns:ns15": "urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns14": "urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns13": "urn:bank_2020_1.transactions.webservices.netsuite.com" ,	
		"xmlns:ns12": "urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23": "urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11": "urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22": "urn:supplychain_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns10": "urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21": "urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20": "urn:marketing_2020_1.lists.webservices.netsuite.com"): {
				ns24#record @("xsi:type": "ns9:SalesOrder","externalId": vars.salesOrderUpdatePayload.salesOrder[0].id , "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance"): {
					// customFieldList: {
					// customField @( "xsi:type":"core:StringCustomFieldRef", "scriptId":"custbody_invoice_credit_body" ,"xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com"): {
					// value: p('invoice.creditBody')
					// }
					// },
					ns9#itemList: vars.salesOrderUpdatePayload.salesOrderItem map(item,value) -> {
						ns9#item: {
							ns9#quantity: item.quantity,
							ns9#description: item.description,
							ns9#rate: item.rate,
							ns9#revRecSchedule  @("internalId": item.revRecScheduleInternalId): "",
							ns9#revRecStartDate: if (item.revRecStartDate != null) (item.revRecStartDate ++ "T00:00:00.000Z") else "",
							ns9#revRecEndDate: if (item.revRecStartDate !=null) (item.revRecStartDate ++ "T00:00:00.000Z") else "",
							ns9#line: item.line,
							ns9#amount: item.amount,
							ns9#vsoePrice: item.vsoePrice,
							ns9#vsoeAllocation: item.vsoeAllocationAmount,
							ns9#vsoeDelivered: item.vsoeDelivered,
							ns9#customFieldList: {
								customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custcol_softwaredelivered"): {
									value: item.softwareDelivered
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_ga"): {
									value: item.nonGA
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_arm_fair_value2"): {
									value: item.vsoeAllocationAmount
								},
								customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custcol_arm_vsoedelivered"): {
									value: item.vsoeDelivered
								},
								customField  @("xsi:type": "DateCustomFieldRef", "scriptId": "custcol_arm_start_date"): {
									value: if ( item.revRecStartDate != null ) (item.revRecStartDate ++ "T00:00:00.000Z") else null
								},
								customField  @("xsi:type": "DateCustomFieldRef", "scriptId": "custcol_arm_end_date"): {
									value: if ( item.revRecEndDate != null ) (item.revRecEndDate ++ "T00:00:00.000Z") else null
								},
								customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custcol_fair_value"): {
									value: item.vsoeAllocationAmount
								},
								customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custcol_ra_revrec_sched"): {
									value @("internalId": item.revRecScheduleInternalId): ""
								}
							}
						}
					},
					ns9#customFieldList: {
						customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custbody_exportedfromsfdc"): {
							value: "true"
						},
						customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custbody_syncedtosfdc"): {
							value: "false"
						},
						customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custbody_to_update_lines"): {
							value: "true"
						}
					}
				}
			}
		}
	}
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
		<ee:transform doc:name="payloadXML" doc:id="0d314bc5-bc94-4225-8335-38d11eb75216" >
			<ee:message />
			<ee:variables >
				<ee:set-variable variableName="soapHeader" ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
---
{
headers: payload.Envelope.Header


}]]></ee:set-variable>
				<ee:set-variable variableName="targetPayload" ><![CDATA[%dw 2.0
output application/xml
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger - Full payload " doc:id="18b6a88e-c368-4137-8f10-230e0be45bb5" message="#[payload]" />
		<try doc:name="Try" doc:id="933ea874-bad1-4126-8cb7-cc3f07c72f12" >
			<wsc:consume operation="${soap.wsdlUpdateOperation}" doc:name="Invoke-SalesOrder" doc:id="4d643347-0bb3-4e62-82df-040dc50c5429" config-ref="Web_Service_Consumer_Config" target="responsePayload" >
				<wsc:message >
					<wsc:body ><![CDATA[#[payload.Envelope.Body]]]></wsc:body>
					<wsc:headers ><![CDATA[#[vars.soapHeader]]]></wsc:headers>
				</wsc:message>
			</wsc:consume>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="ed43610f-10d0-40f2-aa37-a1253611bd23" type="ANY" >
										<logger level="INFO" doc:name="Logger" doc:id="d2daf589-4822-41c9-903b-3ee15006c4f5" message="#[error.description]"/>
					<ee:transform doc:name="Transform Message" doc:id="85a137a9-0ab7-42a7-8b94-484d21f52865" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	salesOrder : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "salesOrder",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<anypoint-mq:publish doc:name="Publish_to_ErrorQueue" doc:id="0d4da1d3-d8fc-4305-b0f1-466632e08552" config-ref="Anypoint_MQ_Config" destination="project-setup-DL-queue">
						<anypoint-mq:properties><![CDATA[#[output application/java
---
{
	"correlationId" : vars.inputProperties.correlationId,
	"operationType" : vars.inputProperties.operationType,
	"apiName" : "fin-netsuite-finance-ent-sapi",
	"apiVersion" : "v1.0",
	"objectName" : "salesOrder",
	"queueName" : p('secure::mq.publish-name')
}]]]></anypoint-mq:properties>
					</anypoint-mq:publish>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="363b8ed5-b77c-49b5-a81f-1e9b2dc31618" message="#[vars.responsePayload]" />
		<ee:transform doc:name="Transform Message" doc:id="f9bba697-1976-4f37-b98e-fd08332037d7" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
var successrsp = {
	salesOrder: {
		netsuiteInternalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId,
		recordID: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		syncedToNS: true
	}
}
var failurersp = {
	salesOrder: {
		netsuiteInternalId: null,
		recordID: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}

---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: if ( vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null ) successrsp else failurersp ,
	objPrefix: "FEP",
	interfaceName: "salesOrder",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]



]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<flow-ref doc:name="log-payload" doc:id="8ea579ef-3d29-499c-9f2f-d790d6e89612" name="log-payload"/>
	</sub-flow>
	<sub-flow name="salesOrder-syncback-implementation" doc:id="5cbafd95-c1e6-4f2d-b6d3-d2a88420f2cb" >
		<set-variable value="#[payload.salesOrder]" doc:name="salesOrderSyncPayload" doc:id="b1ffbf79-4ba9-45f3-8b3d-2989eb7790f6" variableName="salesOrderSyncPayload" mimeType="application/json" />
		<flow-ref doc:name="oauth-header-generator-soapHeader" doc:id="9b563699-6e72-4f41-81c0-1d32dba84abe" name="oauth-header-generator-soapHeader" />
		<logger level="INFO" doc:name="Logger" doc:id="d761f244-f493-43da-81aa-0406e9853218" message="#[vars.oAuthHeaderFinal]" category="@@@@@@@@OAuth Header Value@@@@@@@@@@@@" />
		<ee:transform doc:name="requestPayload" doc:id="3adacc8a-2658-4e62-9738-4f76c9f78b8b" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:messages.platform.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns9 urn:sales_2020_1.transactions.webservices.netsuite.com

---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
    soap#Envelope @("xmlns:S":"http://schemas.xmlsoap.org/soap/envelope/",
    "xmlns:messages" : "urn:messages_2020_1.platform.webservices.netsuite.com",
     "xmlns:accountingLists":"urn:accounting_2020_1.lists.webservices.netsuite.com",
     "xmlns:employeesLists":"urn:employees_2020_1.lists.webservices.netsuite.com", 
     "xmlns:employeesTransactionsTypes":"urn:types.employees_2020_1.transactions.webservices.netsuite.com" ,
      "xmlns:demandplanningTransactions":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com",
       "xmlns:common":"urn:common_2020_1.platform.webservices.netsuite.com", 
       "xmlns:commonTypes":"urn:types.common_2020_1.platform.webservices.netsuite.com" , 
       "xmlns:accountingListsTypes": "urn:types.accounting_2020_1.lists.webservices.netsuite.com", 
       "xmlns:customizationSetup":"urn:customization_2020_1.setup.webservices.netsuite.com",
        "xmlns:inventoryTransactionsTypes": "urn:types.inventory_2020_1.transactions.webservices.netsuite.com",
        "xmlns:supportLists":"urn:support_2020_1.lists.webservices.netsuite.com",
        "xmlns:filecabinetDocuments":"urn:filecabinet_2020_1.documents.webservices.netsuite.com",
  "xmlns:bankTransactionsTypes":"urn:types.bank_2020_1.transactions.webservices.netsuite.com", 
  "xmlns:communicationGeneralTypes":"urn:types.communication_2020_1.general.webservices.netsuite.com", 
  "xmlns:customizationSetupTypes":"urn:types.customization_2020_1.setup.webservices.netsuite.com" , 
  "xmlns:supplychainListsTypes":"urn:types.supplychain_2020_1.lists.webservices.netsuite.com" ,
  "xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com",
  "xmlns:coreTypes":"urn:types.core_2020_1.platform.webservices.netsuite.com", 
 "xmlns:soapenc":"http://schemas.xmlsoap.org/soap/encoding/",
 "xmlns:supplychainLists":"urn:supplychain_2020_1.lists.webservices.netsuite.com", 
 "xmlns:demandplanningTransactionsTypes":"urn:types.demandplanning_2020_1.transactions.webservices.netsuite.com" ,
 "xmlns:websiteLists":"urn:website_2020_1.lists.webservices.netsuite.com",
 "xmlns:salesTransactions":"urn:sales_2020_1.transactions.webservices.netsuite.com",
 "xmlns:salesTransactionsTypes":"urn:types.sales_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:relationshipsLists":"urn:relationships_2020_1.lists.webservices.netsuite.com", 
 "xmlns:inventoryTransactions":"urn:inventory_2020_1.transactions.webservices.netsuite.com",
 "xmlns:employeesListsTypes":"urn:types.employees_2020_1.lists.webservices.netsuite.com",
 "xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance", 
 "xmlns:customersTransactions":"urn:customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivitiesTypes":"urn:types.scheduling_2020_1.activities.webservices.netsuite.com", 
 "xmlns:financialTransactions":"urn:financial_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:xsd":"http://www.w3.org/2001/XMLSchema", 
 "xmlns:relationshipsListsTypes":"urn:types.relationships_2020_1.lists.webservices.netsuite.com",
 "xmlns:employeesTransactions":"urn:employees_2020_1.transactions.webservices.netsuite.com",
 "xmlns:faults":"urn:faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:marketingListsTypes":"urn:types.marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:communicationGeneral":"urn:communication_2020_1.general.webservices.netsuite.com",
 "xmlns:faultsTypes":"urn:types.faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:supportListsTypes":"urn:types.support_2020_1.lists.webservices.netsuite.com",
 "xmlns:websiteListsTypes":"urn:types.website_2020_1.lists.webservices.netsuite.com",
 "xmlns:purchasesTransactions":"urn:purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:financialTransactionsTypes":"urn:types.financial_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivities":"urn:scheduling_2020_1.activities.webservices.netsuite.com",
 "xmlns:bankTransactions":"urn:bank_2020_1.transactions.webservices.netsuite.com",
 "xmlns:marketingLists":"urn:marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:customersTransactionsTypes":"urn:types.customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:purchasesTransactionsTypes":"urn:types.purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:generalTransactions":"urn:general_2020_1.transactions.webservices.netsuite.com",
 "xmlns:filecabinetDocumentsTypes":"urn:types.filecabinet_2020_1.documents.webservices.netsuite.com" ): {
              soap#Header:{
            urn#tokenPassport:{
                ns8#account : p('kimbleSoapNetsuite.realm'),
                ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
                ns8#token: p('secure::kimbleSoapNetsuite.token'),
                ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
                ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
                ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2] },
                
       ns1#preferences :{
        ns2#ignoreReadOnlyFields  :true } ,
   
    ns3#searchPreferences  :{
        ns4#bodyFieldsOnly : true ,
        ns5#pageSize :50   }
 },
        
    
    soap#Body:{
        ns24#updateList @("xmlns:ns5":"urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6":"urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3":"urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns4":"urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9":"urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7":"urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8":"urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19":"urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns18":"urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns2":"urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns17":"urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16":"urn:customization_2020_1.setup.webservices.netsuite.com" ,
		"xmlns:ns15":"urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns14":"urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns13":"urn:bank_2020_1.transactions.webservices.netsuite.com" ,	
		"xmlns:ns12":"urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23":"urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11":"urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22":"urn:supplychain_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns10":"urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20":"urn:marketing_2020_1.lists.webservices.netsuite.com") : {
             ns24#record @("xsi:type":"ns9:SalesOrder","externalId" : vars.salesOrderSyncPayload.id , "xmlns:xsi" : "http://www.w3.org/2001/XMLSchema-instance"):{
                             
                
     //          customFieldList: {
		//				customField @( "xsi:type":"core:StringCustomFieldRef", "scriptId":"custbody_invoice_credit_body" ,"xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com"): {
			//				value: p('invoice.creditBody')
				//		}
					//},
                ns9#customFieldList:{
                	
                       customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custbody_syncedtosfdc"):{ value : vars.salesOrderSyncPayload.syncToSfdc }
                        
}

}
}
}
}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="payloadXML" doc:id="b6f44f34-4ea0-4a40-8768-fd42c17feb9c" >
			<ee:message />
			<ee:variables >
				<ee:set-variable variableName="soapHeader" ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
---
{
headers: payload.Envelope.Header


}]]></ee:set-variable>
				<ee:set-variable variableName="targetPayload" ><![CDATA[%dw 2.0
output application/xml
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger - Full payload " doc:id="c5257194-b565-40e5-8caf-5b6e2b8a8ae8" message="#[payload]" />
		<try doc:name="Try" doc:id="75a94884-20eb-4798-a6de-aff9e096ad61" >
			<wsc:consume operation="${soap.wsdlUpdateOperation}" doc:name="Invoke-salesOrder" doc:id="e5e23450-d07d-4e92-a9b8-0ada6a2fbb7f" config-ref="Web_Service_Consumer_Config" target="responsePayload" >
				<wsc:message >
					<wsc:body ><![CDATA[#[payload.Envelope.Body]]]></wsc:body>
					<wsc:headers ><![CDATA[#[vars.soapHeader]]]></wsc:headers>
				</wsc:message>
			</wsc:consume>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="c3c51b97-7342-4a27-91b4-9898843342a3" type="ANY" >
										<logger level="INFO" doc:name="Logger" doc:id="cdb2823c-18eb-4b25-aa81-88914e41a2bd" message="#[error.description]"/>
					<ee:transform doc:name="Transform Message" doc:id="5ceee9fe-f02d-48bf-83a8-8e906b8a3622" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	salesOrder : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "salesOrder",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<anypoint-mq:publish doc:name="Publish_to_ErrorQueue" doc:id="63d223f5-2d1e-4e96-a6e4-b3e674794e77" config-ref="Anypoint_MQ_Config" destination="project-setup-DL-queue">
						<anypoint-mq:properties><![CDATA[#[output application/java
---
{
	"correlationId" : vars.inputProperties.correlationId,
	"operationType" : vars.inputProperties.operationType,
	"apiName" : "fin-netsuite-finance-ent-sapi",
	"apiVersion" : "v1.0",
	"objectName" : "salesOrder",
	"queueName" : p('secure::mq.publish-name')
}]]]></anypoint-mq:properties>
					</anypoint-mq:publish>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="ca928c7c-3ce9-4442-9da6-bb3465b2703d" message="#[vars.responsePayload]" />
		<ee:transform doc:name="isSuccess" doc:id="e037e0a6-ec19-484a-9b51-c256babce1a4" >
			<ee:message />
			<ee:variables >
				<ee:set-variable variableName="isSuccess" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	
	message :  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess
}]]></ee:set-variable>
				<ee:set-variable variableName="businessError" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="39931f59-1855-4dca-a052-22d82b35fb6b" >
			<when expression="#[vars.isSuccess.message == 'true']" >
				<ee:transform doc:name="Transform Message" doc:id="eb4cefbd-9aaa-4fd0-9fee-17d3757a7ab6" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{
	internalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="60fc33a3-6747-4343-adf2-1d9880d0d122" message="#[payload]" />
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="abb65f45-7767-4a9c-ab2c-bf5c99227389" message="#[payload]" />
				<ee:transform doc:name="Transform Message" doc:id="47c32a2e-4af1-4b74-9691-7198bca57187" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	salesOrder : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "salesOrder",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="699700d6-1f3e-40f7-9ddb-5d7ca9eaa616" />
			</otherwise>
		</choice>
		<flow-ref doc:name="log-after-outbound-request" doc:id="fcfa98eb-634f-4afa-abc3-cc6001728f2c" name="log-after-outbound-request" />
	</sub-flow>
	
	
	
	</mule>
