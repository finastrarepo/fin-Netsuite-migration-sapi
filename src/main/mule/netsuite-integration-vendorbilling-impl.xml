<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:anypoint-mq="http://www.mulesoft.org/schema/mule/anypoint-mq"
	xmlns:wsc="http://www.mulesoft.org/schema/mule/wsc" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/wsc http://www.mulesoft.org/schema/mule/wsc/current/mule-wsc.xsd
http://www.mulesoft.org/schema/mule/anypoint-mq http://www.mulesoft.org/schema/mule/anypoint-mq/current/mule-anypoint-mq.xsd">
	
	
		
	<sub-flow
		name="VendorBillingScheduleLine-Implementation"
		doc:id="130840c3-4a62-41bb-84c8-3f2e6ab613e8">
		<set-variable value="#[payload.nsVendorBillingLinePayload]" doc:name="vendorBillSchLinePayload"
			doc:id="92057468-7a08-4207-9e4a-9819585af689"
			variableName="vendorBillSchLinePayload" mimeType="application/json" />
		<flow-ref doc:name="oauth-header-generator-soapHeader"
			doc:id="abad57fd-6b31-46b4-8c80-f1017260fb84"
			name="oauth-header-generator-soapHeader" />
		<logger level="INFO" doc:name="Logger" doc:id="62196025-e7a8-49eb-b063-e6588a2840bd" category="@@@@@@@@OAuth Header Value@@@@@@@@@@@@" message="#[vars.oAuthHeaderFinal]"/>
		<ee:transform doc:name="requestPayload"
			doc:id="931d7eb3-7f83-4f23-b468-2dabbabaf448">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:messages.platform.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns13 urn:customization_2020_1.setup.webservices.netsuite.com
---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
	soap#Envelope @("xmlns:S": "http://schemas.xmlsoap.org/soap/envelope/"): {
		soap#Header: {
			urn#tokenPassport: {
				ns8#account: p('kimbleSoapNetsuite.realm'),
				ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
				ns8#token: p('secure::kimbleSoapNetsuite.token'),
				ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
				ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
				ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2]
			},
			ns1#preferences: {
				ns2#ignoreReadOnlyFields: true
			},
			ns3#searchPreferences: {
				ns4#bodyFieldsOnly: true,
				ns5#pageSize: 50
			}
		},
		soap#Body: {
			ns24#upsertList @("xmlns:ns5": "urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6": "urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3": "urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns4": "urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9": "urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7": "urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8": "urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19": "urn:supplychain_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns18": "urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns2": "urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns17": "urn:marketing_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16": "urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns15": "urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns14": "urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns13": "urn:customization_2020_1.setup.webservices.netsuite.com" ,	
		"xmlns:ns12": "urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23": "urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11": "urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22": "urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns10": "urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21": "urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20": "urn:bank_2020_1.transactions.webservices.netsuite.com"): {
				ns24#record @("xsi:type": "ns13:CustomRecord","externalId": vars.vendorBillSchLinePayload[0].id , "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance"): {
					// customFieldList: {
					// customField @( "xsi:type":"core:StringCustomFieldRef", "scriptId":"custbody_invoice_credit_body" ,"xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com"): {
					// value: p('invoice.creditBody')
					// }
					// },
					ns13#name: vars.vendorBillSchLinePayload.name,
					ns13#recType @("internalId": 450): "",
					ns13#customFieldList: {
						customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custrecord_vd_bsch"): {
							value @("internalId": vars.vendorBillSchLinePayload[0].nsVendorBillingScheduleInternalId): ""
						},
						customField  @("xsi:type": "StringCustomFieldRef", "scriptId": "custrecord_vd_bs_line_project"): {
							value : vars.vendorBillSchLinePayload[0].nsProjectInternalId
						},
						customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custrecord_vd_milestone"): {
							value @("internalId": vars.vendorBillSchLinePayload[0].nsProjectMilestoneInternalId): ""
						},
						customField  @("xsi:type": "SelectCustomFieldRef", "scriptId": "custrecord_vd_bs_trigger"): {
							value @("internalId": vars.vendorBillSchLinePayload[0].vendorBSchTriggerInternalId): ""
						},
						customField  @("xsi:type": "DoubleCustomFieldRef", "scriptId": "custrecord_vd_bs_amount"): {
							value: vars.vendorBillSchLinePayload[0].amount
						},
						customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custrecord_exported_from_sfdc_vbs_line"): {
							value: "true"
						},
						customField  @("xsi:type": "BooleanCustomFieldRef", "scriptId": "custrecord_synced_to_sfdc_vbs_line"): {
							value: "false"
						}
					}
				}
			}
		}
	}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="payloadXML"
			doc:id="fff0d84b-5ed6-426f-b344-143a1a357f3b">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="soapHeader"><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
---
{
headers: payload.Envelope.Header


}]]></ee:set-variable>
				<ee:set-variable variableName="targetPayload"><![CDATA[%dw 2.0
output application/xml
---
payload]]></ee:set-variable>

			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger - Full payload "
			doc:id="24019308-cfb6-46bc-be0b-1b949ae89fb3" message="#[payload]" />
		<try doc:name="Try" doc:id="125c3065-673f-449e-9d26-603eff400b77">
			
	
			<wsc:consume doc:name="Invoke-VendorBilling"
				doc:id="10313adb-0e20-4e8f-a4fc-e5fa46d62620"
				config-ref="Web_Service_Consumer_Config"
				operation="${soap.wsdlUpsertOperation}" target="responsePayload">
			<wsc:message>
					<wsc:body><![CDATA[#[payload.Envelope.Body]]]></wsc:body>
					<wsc:headers><![CDATA[#[vars.soapHeader]]]></wsc:headers>
				</wsc:message>
			</wsc:consume>
			<error-handler>
				<on-error-propagate enableNotifications="true"
					logException="true" doc:name="On Error Propagate"
					doc:id="d2018621-38fc-44fd-8fcd-69d866e475f9" type="ANY">
										<logger level="INFO" doc:name="Logger" doc:id="098b1ba5-5223-493b-8332-15ad97f8ec73" message="#[error.description]"/>
					<ee:transform doc:name="Transform Message" doc:id="fe700247-dba1-4b09-802d-1feee4e13532" >
						<ee:message >
						</ee:message>
						<ee:variables >
							<ee:set-variable variableName="logData" ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	vendorBillingScheduleLine : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "vendorBillingScheduleLine",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
					<anypoint-mq:publish doc:name="Publish_to_ErrorQueue" doc:id="19d34b96-92c5-4af2-a091-ecb224c1f685" config-ref="Anypoint_MQ_Config" destination="project-setup-DL-queue">
						<anypoint-mq:properties><![CDATA[#[output application/java
---
{
	"correlationId" : vars.inputProperties.correlationId,
	"operationType" : vars.inputProperties.operationType,
	"apiName" : "fin-netsuite-finance-ent-sapi",
	"apiVersion" : "v1.0",
	"objectName" : "task",
	"queueName" : p('secure::mq.publish-name')
}]]]></anypoint-mq:properties>
					</anypoint-mq:publish>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="9eb092eb-b4fc-41a2-819a-53029e1a4ab2" message="#[vars.responsePayload]"/>
		<ee:transform doc:name="netsuiteInternalId" doc:id="f75daec6-617f-4382-bb9b-179ec6a73a22">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com

---
{
	recordID: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@externalId,
	netsuiteInternalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="netsuiteInternalId" doc:id="60b2e736-54da-4d04-a1a9-24eb3eb08001" message="#[payload]"/>
	
	<logger level="INFO" doc:name="Logger for error code" doc:id="9fcd7b22-fc2c-4a9e-9349-843ec1d4ad02" message="#[%dw 2.0
output application/json
---
{
       (code: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.code) if (vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.code != null)
       
}]"/>
		<logger level="INFO" doc:name="Logger" doc:id="7eed8b5f-1fae-4153-aafc-7d4ebf3021be" message='#[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]'/>
		<ee:transform doc:name="netsuiteInternalId" doc:id="d16274f8-6a3c-41e5-9cbc-643d51b65000">
			<ee:message>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="isSuccess" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	
	message :  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess
}]]></ee:set-variable>
				<ee:set-variable variableName="businessError" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="9f0dce93-9754-4edb-b817-e3e3bf3ea175" >
			<when expression="#[vars.isSuccess.message == 'true']">
				<ee:transform doc:name="Transform Message" doc:id="4e92bc6c-3c64-4b69-9a5d-4e377a727861" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{ vendorBillingScheduleLine: {
	
	recordID: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@externalId,
	netsuiteInternalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true,
	//nsCustomProjectNo : vars.restRsp.entityId
}}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger- BEFORE MQ" doc:id="82ab799b-5f51-4f05-b6c3-e8b2f1422280" message="#[payload]" />
				<anypoint-mq:publish doc:name="Publish" doc:id="ac16caa7-6793-403c-9a8c-cb4324f1dde7" config-ref="Anypoint_MQ_Config" destination="${secure::mq.publish-name}">
			<anypoint-mq:properties><![CDATA[#[output application/java
---
{
	"correlationId" : vars.inputProperties.correlationId,
	"operationType" : vars.inputProperties.operationType,
	"apiName" : "fin-netsuite-finance-ent-sapi",
	"apiVersion" : "v1.0",
	"objectName" : "vendorBillingScheduleLine",
	"queueName" : p('secure::mq.publish-name')
}]]]></anypoint-mq:properties>
		</anypoint-mq:publish>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="b39a020c-737f-4272-9157-d02ab347c2dd" message="#[payload]"/>
				<ee:transform doc:name="Transform Message" doc:id="fa5bc670-fe65-44e8-ba9a-93b15f0a5df2" >
					<ee:message >
					</ee:message>
					<ee:variables >
						<ee:set-variable variableName="logData" ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	vendorBillingScheduleLine : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "vendorBillingScheduleLine",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-variable>
					</ee:variables>
				</ee:transform>
			</otherwise>
		</choice>
		<async doc:name="Async" doc:id="28a22426-7827-4858-921a-7d7045181740" >
			<flow-ref doc:name="log-payload" doc:id="38c41165-4bea-4e28-9ecc-0c2b996926c6" name="log-payload"/>
		</async>
	</sub-flow>
	
	<sub-flow
		name="vendorBilling-Implementation"
		doc:id="bfac821c-99f1-43f9-aa52-6793ea6155fe">
		<set-variable value="#[payload.nsVendorBillingSchedule[0]]" doc:name="vendorBillPayload"
			doc:id="0415d97d-16c7-4399-9f37-344d0daaefbc"
			variableName="vendorBillPayload" mimeType="application/json" />
		<flow-ref doc:name="oauth-header-generator-soapHeader"
			doc:id="333bc727-ed86-4efd-9abd-d921ded27d79"
			name="oauth-header-generator-soapHeader" />
		<logger level="INFO" doc:name="Logger" doc:id="f36c44fa-bab6-4ee8-af28-f26c3abb5144" category="@@@@@@@@OAuth Header Value@@@@@@@@@@@@" message="#[vars.oAuthHeaderFinal]"/>
		<ee:transform doc:name="requestPayload"
			doc:id="052d93ea-2ef2-42b2-b9d1-a53d64a47a35">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:messages.platform.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns13 urn:customization_2020_1.setup.webservices.netsuite.com


---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
    soap#Envelope @("xmlns:S":"http://schemas.xmlsoap.org/soap/envelope/" ): {
              soap#Header:{
            urn#tokenPassport:{
                ns8#account : p('kimbleSoapNetsuite.realm'),
                ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
                ns8#token: p('secure::kimbleSoapNetsuite.token'),
                ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
                ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
                ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2] },
                
       ns1#preferences :{
        ns2#ignoreReadOnlyFields  :true } ,
   
    ns3#searchPreferences  :{
        ns4#bodyFieldsOnly : true ,
        ns5#pageSize :50   }
 },
        
    
    soap#Body:{
        ns24#upsertList @("xmlns:ns5":"urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6":"urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3":"urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns4":"urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9":"urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7":"urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8":"urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19":"urn:supplychain_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns18":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns2":"urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns17":"urn:marketing_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16":"urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns15":"urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns14":"urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns13":"urn:customization_2020_1.setup.webservices.netsuite.com" ,	
		"xmlns:ns12":"urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23":"urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11":"urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22":"urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns10":"urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21":"urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20":"urn:bank_2020_1.transactions.webservices.netsuite.com") : {
             ns24#record @("xsi:type":"ns13:CustomRecord","externalId" : vars.vendorBillPayload.id , "xmlns:xsi" : "http://www.w3.org/2001/XMLSchema-instance"):{
                             
                
     //          customFieldList: {
		//				customField @( "xsi:type":"core:StringCustomFieldRef", "scriptId":"custbody_invoice_credit_body" ,"xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com"): {
			//				value: p('invoice.creditBody')
				//		}
					//},
					
				ns13#name: vars.vendorBillPayload.name  ,
                ns13#recType @("internalId":449 ) : "" ,				
			
                ns13#customFieldList:{
                	
                        customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custrecord_exported_from_sfdc_vbs"):{ value  : "true"},
                        
                        customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custrecord_synced_to_sfdc_vbs"):{ value : "false" }
}

}
}
}
}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="payloadXML"
			doc:id="78b21d17-1219-401f-8729-9d40b9b9391a">
			<ee:message>
			</ee:message>
			<ee:variables>
				<ee:set-variable variableName="soapHeader"><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
---
{
headers: payload.Envelope.Header


}]]></ee:set-variable>
				<ee:set-variable variableName="targetPayload"><![CDATA[%dw 2.0
output application/xml
---
payload]]></ee:set-variable>

			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger - Full payload "
			doc:id="7b8ec6fd-bfc4-43cf-9e70-2e8e9681905c" message="#[payload]" />
		<try doc:name="Try" doc:id="a155ebf4-1580-4a77-b01a-84c8a09c12a2">
			
	
			<wsc:consume doc:name="Invoke-VendorBilling"
				doc:id="4894db8f-a6d9-4e63-90d5-b952b9a49b21"
				config-ref="Web_Service_Consumer_Config"
				operation="${soap.wsdlUpsertOperation}" target="responsePayload">
			<wsc:message>
					<wsc:body><![CDATA[#[payload.Envelope.Body]]]></wsc:body>
					<wsc:headers><![CDATA[#[vars.soapHeader]]]></wsc:headers>
				</wsc:message>
			</wsc:consume>
			<error-handler>
				<on-error-propagate enableNotifications="true"
					logException="true" doc:name="On Error Propagate"
					doc:id="30595559-2932-444f-bff9-b353e308ffa4" type="ANY">
					<logger level="INFO" doc:name="Logger" doc:id="99bf88f4-a6a2-465a-aa5b-39a5a9d707c9" message="#[error.description]"/>
					<ee:transform doc:name="Transform Message" doc:id="c31ba31c-4a00-42c3-b1aa-0534c0a17ee9" >
						<ee:message >
						</ee:message>
						<ee:variables >
							<ee:set-variable variableName="logData" ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	vendorBillingSchedule : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "vendorBillingSchedule",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-variable>
						</ee:variables>
					</ee:transform>
					<anypoint-mq:publish doc:name="Publish_to_ErrorQueue" doc:id="c8a2df3c-a719-4170-a6de-19053127be02" config-ref="Anypoint_MQ_Config" destination="project-setup-DL-queue"/>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="ee341073-6515-43e4-83b1-e6262d08c73f" message="#[vars.responsePayload]"/>
		<ee:transform doc:name="netsuiteInternalId" doc:id="4f85e5b4-2f9d-4900-9d39-da8030e960d2">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com

---
{
	recordID: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@externalId,
	netsuiteInternalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true
}]]></ee:set-payload>
			</ee:message>
			<ee:variables>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="netsuiteInternalId" doc:id="32a23cf1-d26d-4cc2-ae98-de0700436d26" message="#[payload]"/>
	
	<logger level="INFO" doc:name="Logger for error code" doc:id="47736035-fb2d-4529-8498-3e2a61c9ad51" message="#[%dw 2.0
output application/json
---
{
       (code: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.code) if (vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.code != null)
       
}]"/>
		<logger level="INFO" doc:name="Logger" doc:id="7ce878d3-23c2-44eb-b641-b6ee10c019b4" message='#[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]'/>
		<ee:transform doc:name="netsuiteInternalId" doc:id="b82ec1cb-4647-42e0-9a6f-0e652e06e40b">
			<ee:message>
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="isSuccess" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	
	message :  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess
}]]></ee:set-variable>
				<ee:set-variable variableName="businessError" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="16551028-48ac-4237-8cc5-ec8aec32270e" >
			<when expression="#[vars.isSuccess.message == 'true']">
				<ee:transform doc:name="Transform Message" doc:id="2b7dc72e-d8ee-4cc0-82b6-f5a4288d10ba" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{ vendorBillingSchedule:{
	recordID: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@externalId,
	netsuiteInternalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true
	//nsCustomProjectNo : vars.restRsp.entityId
}}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger- BEFORE MQ" doc:id="c86670fe-451c-4836-84e5-ddc682dbd257" message="#[payload]" />
				<anypoint-mq:publish doc:name="Publish" doc:id="cc1a7060-1b88-4c04-a2ef-61d226e816ea" config-ref="Anypoint_MQ_Config" destination="${secure::mq.publish-name}">
			<anypoint-mq:properties><![CDATA[#[output application/java
---
{
	"correlationId" : vars.inputProperties.correlationId,
	"operationType" : vars.inputProperties.operationType,
	"apiName" : "fin-netsuite-finance-ent-sapi",
	"apiVersion" : "v1.0",
	"objectName" : "vendorBillingSchedule",
	"queueName" : p('secure::mq.publish-name')
}]]]></anypoint-mq:properties>
		</anypoint-mq:publish>
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="9f970f38-2952-4c53-af14-f531a79c8654" message="#[payload]"/>
				<ee:transform doc:name="Transform Message" doc:id="d71241a8-afd6-47cd-a753-1358e48e1345" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	vendorBillingSchedule : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "vendorBillingSchedule",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
					</ee:message>
				</ee:transform>
			</otherwise>
		</choice>
		<async doc:name="Async" doc:id="053b8dd5-6543-4425-8d37-7c4de0464999" >
			<flow-ref doc:name="log-payload" doc:id="eb1fec56-577f-485e-a261-902c1b759bcd" name="log-payload"/>
		</async>
	
	</sub-flow>
	<sub-flow name="vendorBilling-syncback-implementation" doc:id="ce09fb9f-f285-46a1-9d3f-cd4a745b59ea" >
		<set-variable value="#[payload.nsVendorBillingSchedule]" doc:name="vendorBillingSyncPayload" doc:id="0e0afec6-fbf1-412c-9a4d-97fc92ed0a6b" variableName="vendorBillingSyncPayload" mimeType="application/json" />
		<flow-ref doc:name="oauth-header-generator-soapHeader" doc:id="b9644e1a-06d3-4e13-8bad-8bf727dd82c3" name="oauth-header-generator-soapHeader" />
		<logger level="INFO" doc:name="Logger" doc:id="ca7ba719-0f19-436e-ada4-d2baf1f82028" message="#[vars.oAuthHeaderFinal]" category="@@@@@@@@OAuth Header Value@@@@@@@@@@@@" />
		<ee:transform doc:name="requestPayload" doc:id="42b639ea-1474-4800-8e1a-e5d3b1ffedff" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:messages.platform.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com


---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
    soap#Envelope @("xmlns:S":"http://schemas.xmlsoap.org/soap/envelope/",
    "xmlns:messages" : "urn:messages_2020_1.platform.webservices.netsuite.com",
     "xmlns:accountingLists":"urn:accounting_2020_1.lists.webservices.netsuite.com",
     "xmlns:employeesLists":"urn:employees_2020_1.lists.webservices.netsuite.com", 
     "xmlns:employeesTransactionsTypes":"urn:types.employees_2020_1.transactions.webservices.netsuite.com" ,
      "xmlns:demandplanningTransactions":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com",
       "xmlns:common":"urn:common_2020_1.platform.webservices.netsuite.com", 
       "xmlns:commonTypes":"urn:types.common_2020_1.platform.webservices.netsuite.com" , 
       "xmlns:accountingListsTypes": "urn:types.accounting_2020_1.lists.webservices.netsuite.com", 
       "xmlns:customizationSetup":"urn:customization_2020_1.setup.webservices.netsuite.com",
        "xmlns:inventoryTransactionsTypes": "urn:types.inventory_2020_1.transactions.webservices.netsuite.com",
        "xmlns:supportLists":"urn:support_2020_1.lists.webservices.netsuite.com",
        "xmlns:filecabinetDocuments":"urn:filecabinet_2020_1.documents.webservices.netsuite.com",
  "xmlns:bankTransactionsTypes":"urn:types.bank_2020_1.transactions.webservices.netsuite.com", 
  "xmlns:communicationGeneralTypes":"urn:types.communication_2020_1.general.webservices.netsuite.com", 
  "xmlns:customizationSetupTypes":"urn:types.customization_2020_1.setup.webservices.netsuite.com" , 
  "xmlns:supplychainListsTypes":"urn:types.supplychain_2020_1.lists.webservices.netsuite.com" ,
  "xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com",
  "xmlns:coreTypes":"urn:types.core_2020_1.platform.webservices.netsuite.com", 
 "xmlns:soapenc":"http://schemas.xmlsoap.org/soap/encoding/",
 "xmlns:supplychainLists":"urn:supplychain_2020_1.lists.webservices.netsuite.com", 
 "xmlns:demandplanningTransactionsTypes":"urn:types.demandplanning_2020_1.transactions.webservices.netsuite.com" ,
 "xmlns:websiteLists":"urn:website_2020_1.lists.webservices.netsuite.com",
 "xmlns:salesTransactions":"urn:sales_2020_1.transactions.webservices.netsuite.com",
 "xmlns:salesTransactionsTypes":"urn:types.sales_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:relationshipsLists":"urn:relationships_2020_1.lists.webservices.netsuite.com", 
 "xmlns:inventoryTransactions":"urn:inventory_2020_1.transactions.webservices.netsuite.com",
 "xmlns:employeesListsTypes":"urn:types.employees_2020_1.lists.webservices.netsuite.com",
 "xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance", 
 "xmlns:customersTransactions":"urn:customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivitiesTypes":"urn:types.scheduling_2020_1.activities.webservices.netsuite.com", 
 "xmlns:financialTransactions":"urn:financial_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:xsd":"http://www.w3.org/2001/XMLSchema", 
 "xmlns:relationshipsListsTypes":"urn:types.relationships_2020_1.lists.webservices.netsuite.com",
 "xmlns:employeesTransactions":"urn:employees_2020_1.transactions.webservices.netsuite.com",
 "xmlns:faults":"urn:faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:marketingListsTypes":"urn:types.marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:communicationGeneral":"urn:communication_2020_1.general.webservices.netsuite.com",
 "xmlns:faultsTypes":"urn:types.faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:supportListsTypes":"urn:types.support_2020_1.lists.webservices.netsuite.com",
 "xmlns:websiteListsTypes":"urn:types.website_2020_1.lists.webservices.netsuite.com",
 "xmlns:purchasesTransactions":"urn:purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:financialTransactionsTypes":"urn:types.financial_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivities":"urn:scheduling_2020_1.activities.webservices.netsuite.com",
 "xmlns:bankTransactions":"urn:bank_2020_1.transactions.webservices.netsuite.com",
 "xmlns:marketingLists":"urn:marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:customersTransactionsTypes":"urn:types.customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:purchasesTransactionsTypes":"urn:types.purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:generalTransactions":"urn:general_2020_1.transactions.webservices.netsuite.com",
 "xmlns:filecabinetDocumentsTypes":"urn:types.filecabinet_2020_1.documents.webservices.netsuite.com" ): {
              soap#Header:{
            urn#tokenPassport:{
                ns8#account : p('kimbleSoapNetsuite.realm'),
                ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
                ns8#token: p('secure::kimbleSoapNetsuite.token'),
                ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
                ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
                ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2] },
                
       ns1#preferences :{
        ns2#ignoreReadOnlyFields  :true } ,
   
    ns3#searchPreferences  :{
        ns4#bodyFieldsOnly : true ,
        ns5#pageSize :50   }
 },
        
    
    soap#Body:{
        ns24#updateList @("xmlns:ns5":"urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6":"urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3":"urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns4":"urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9":"urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7":"urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8":"urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19":"urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns18":"urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns2":"urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns17":"urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16":"urn:customization_2020_1.setup.webservices.netsuite.com" ,
		"xmlns:ns15":"urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns14":"urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns13":"urn:bank_2020_1.transactions.webservices.netsuite.com" ,	
		"xmlns:ns12":"urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23":"urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11":"urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22":"urn:supplychain_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns10":"urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20":"urn:marketing_2020_1.lists.webservices.netsuite.com") : {
             ns24#record @("xsi:type":"ns6:Job","externalId" : vars.vendorBillingSyncPayload.id , "xmlns:xsi" : "http://www.w3.org/2001/XMLSchema-instance"):{
                             
                
     //          customFieldList: {
		//				customField @( "xsi:type":"core:StringCustomFieldRef", "scriptId":"custbody_invoice_credit_body" ,"xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com"): {
			//				value: p('invoice.creditBody')
				//		}
					//},
                ns6#customFieldList:{
                	
                       customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custrecord_synced_to_sfdc_vbs"):{ value : vars.vendorBillingSyncPayload.syncToSfdc }
                        
}

}
}
}
}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="payloadXML" doc:id="a051bc2f-ddbe-47fd-959a-8e3b3e2036ab" >
			<ee:message />
			<ee:variables >
				<ee:set-variable variableName="soapHeader" ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
---
{
headers: payload.Envelope.Header


}]]></ee:set-variable>
				<ee:set-variable variableName="targetPayload" ><![CDATA[%dw 2.0
output application/xml
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger - Full payload " doc:id="3c1a5109-29a1-489a-98b9-17ff04b09956" message="#[payload]" />
		<try doc:name="Try" doc:id="4e2d585d-cc74-4b15-ba74-704c4eda95dd" >
			<wsc:consume operation="${soap.wsdlUpdateOperation}" doc:name="Invoke-vendorBilling" doc:id="753c98d6-94a6-4fcd-98de-3b3ddfc6da99" config-ref="Web_Service_Consumer_Config" target="responsePayload" >
				<wsc:message >
					<wsc:body ><![CDATA[#[payload.Envelope.Body]]]></wsc:body>
					<wsc:headers ><![CDATA[#[vars.soapHeader]]]></wsc:headers>
				</wsc:message>
			</wsc:consume>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="329bb39e-bb5c-4bf7-9d37-e203b8946e39" type="ANY" >
					<logger level="INFO" doc:name="Logger" doc:id="84d098d2-2aab-444a-a4d7-be0887d31cde" message="#[error.description]" />
					<ee:transform doc:name="Transform Message" doc:id="cdf5e522-2e2f-4152-8b3f-70c88b779832" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	vendorBillingSchedule : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "vendorBillingSchedule",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<anypoint-mq:publish doc:name="Publish_to_ErrorQueues" doc:id="cee4d9fb-3d8a-41f5-9b02-aa5bac515d1d" config-ref="Anypoint_MQ_Config" destination="project-setup-DL-queue" >
						<anypoint-mq:properties ><![CDATA[#[output application/java
---
{
	objectName : Job
}]]]></anypoint-mq:properties>
					</anypoint-mq:publish>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="0b772d74-1a17-4e57-bfe2-ff5e1b33cc16" message="#[vars.responsePayload]" />
		<ee:transform doc:name="isSuccess" doc:id="4b3758f1-39ae-4b83-9180-a7f6612a4329" >
			<ee:message />
			<ee:variables >
				<ee:set-variable variableName="isSuccess" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	
	message :  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess
}]]></ee:set-variable>
				<ee:set-variable variableName="businessError" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="1f21ef8e-52a7-4367-ba8b-1093afe6e9f9" >
			<when expression="#[vars.isSuccess.message == 'true']" >
				<ee:transform doc:name="Transform Message" doc:id="2d1e6270-6bf7-4e4b-bd06-a7fc11551097" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{
	internalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="2a3348c2-9269-473d-be06-8366ef9dbe2f" message="#[payload]" />
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="66c46862-04b9-4cc8-94af-202f199d2ac3" message="#[payload]" />
				<ee:transform doc:name="Transform Message" doc:id="71441c25-2271-4ec4-aa6f-38752535baa8" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	vendorBillingSchedule : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "vendorBillingSchedule",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="dbb1a46b-42e5-4a1d-80fb-76c250381130" />
			</otherwise>
		</choice>
		<flow-ref doc:name="log-after-outbound-request" doc:id="c2dea31b-1e04-41fe-a063-18383f94a7e2" name="log-after-outbound-request" />
	</sub-flow>
	<sub-flow name="vendorBillingScheduleLine-syncback-implementation" doc:id="bc784468-4974-46ac-af25-a3eab26c7559" >
		<set-variable value="#[payload.nsVendorBillingLinePayload]" doc:name="vendorBillingSchLineSyncPayload" doc:id="53c3ed2b-efa2-473e-8227-3c171915fd1e" variableName="vendorBillingSchLineSyncPayload" mimeType="application/json" />
		<flow-ref doc:name="oauth-header-generator-soapHeader" doc:id="8b8f217c-e474-4887-a0b8-394a92248f04" name="oauth-header-generator-soapHeader" />
		<logger level="INFO" doc:name="Logger" doc:id="2c7286ff-7385-4077-b4b2-51e73a3814cc" message="#[vars.oAuthHeaderFinal]" category="@@@@@@@@OAuth Header Value@@@@@@@@@@@@" />
		<ee:transform doc:name="requestPayload" doc:id="3756a463-9715-4286-b36d-b72ab7be17cc" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
ns soapEnc http://schemas.xmlsoap.org/soap/encoding/
ns ns01 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns6 urn:relationships_2020_1.lists.webservices.netsuite.com
ns ns8 urn:core_2020_1.platform.webservices.netsuite.com
ns ns1 urn:messages.platform.webservices.netsuite.com
ns ns24 urn:messages_2020_1.platform.webservices.netsuite.com
ns urn urn:messages_2020_1.platform.webservices.netsuite.com
ns ns2 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns3 urn:messages.platform.webservices.netsuite.com
ns ns4 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns5 urn:messages_2020_1.platform.webservices.netsuite.com


---
//payload.ns0#Envelope.ns0#Body.add.record.itemList
{
    soap#Envelope @("xmlns:S":"http://schemas.xmlsoap.org/soap/envelope/",
    "xmlns:messages" : "urn:messages_2020_1.platform.webservices.netsuite.com",
     "xmlns:accountingLists":"urn:accounting_2020_1.lists.webservices.netsuite.com",
     "xmlns:employeesLists":"urn:employees_2020_1.lists.webservices.netsuite.com", 
     "xmlns:employeesTransactionsTypes":"urn:types.employees_2020_1.transactions.webservices.netsuite.com" ,
      "xmlns:demandplanningTransactions":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com",
       "xmlns:common":"urn:common_2020_1.platform.webservices.netsuite.com", 
       "xmlns:commonTypes":"urn:types.common_2020_1.platform.webservices.netsuite.com" , 
       "xmlns:accountingListsTypes": "urn:types.accounting_2020_1.lists.webservices.netsuite.com", 
       "xmlns:customizationSetup":"urn:customization_2020_1.setup.webservices.netsuite.com",
        "xmlns:inventoryTransactionsTypes": "urn:types.inventory_2020_1.transactions.webservices.netsuite.com",
        "xmlns:supportLists":"urn:support_2020_1.lists.webservices.netsuite.com",
        "xmlns:filecabinetDocuments":"urn:filecabinet_2020_1.documents.webservices.netsuite.com",
  "xmlns:bankTransactionsTypes":"urn:types.bank_2020_1.transactions.webservices.netsuite.com", 
  "xmlns:communicationGeneralTypes":"urn:types.communication_2020_1.general.webservices.netsuite.com", 
  "xmlns:customizationSetupTypes":"urn:types.customization_2020_1.setup.webservices.netsuite.com" , 
  "xmlns:supplychainListsTypes":"urn:types.supplychain_2020_1.lists.webservices.netsuite.com" ,
  "xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com",
  "xmlns:coreTypes":"urn:types.core_2020_1.platform.webservices.netsuite.com", 
 "xmlns:soapenc":"http://schemas.xmlsoap.org/soap/encoding/",
 "xmlns:supplychainLists":"urn:supplychain_2020_1.lists.webservices.netsuite.com", 
 "xmlns:demandplanningTransactionsTypes":"urn:types.demandplanning_2020_1.transactions.webservices.netsuite.com" ,
 "xmlns:websiteLists":"urn:website_2020_1.lists.webservices.netsuite.com",
 "xmlns:salesTransactions":"urn:sales_2020_1.transactions.webservices.netsuite.com",
 "xmlns:salesTransactionsTypes":"urn:types.sales_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:relationshipsLists":"urn:relationships_2020_1.lists.webservices.netsuite.com", 
 "xmlns:inventoryTransactions":"urn:inventory_2020_1.transactions.webservices.netsuite.com",
 "xmlns:employeesListsTypes":"urn:types.employees_2020_1.lists.webservices.netsuite.com",
 "xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance", 
 "xmlns:customersTransactions":"urn:customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivitiesTypes":"urn:types.scheduling_2020_1.activities.webservices.netsuite.com", 
 "xmlns:financialTransactions":"urn:financial_2020_1.transactions.webservices.netsuite.com", 
 "xmlns:xsd":"http://www.w3.org/2001/XMLSchema", 
 "xmlns:relationshipsListsTypes":"urn:types.relationships_2020_1.lists.webservices.netsuite.com",
 "xmlns:employeesTransactions":"urn:employees_2020_1.transactions.webservices.netsuite.com",
 "xmlns:faults":"urn:faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:marketingListsTypes":"urn:types.marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:communicationGeneral":"urn:communication_2020_1.general.webservices.netsuite.com",
 "xmlns:faultsTypes":"urn:types.faults_2020_1.platform.webservices.netsuite.com",
 "xmlns:supportListsTypes":"urn:types.support_2020_1.lists.webservices.netsuite.com",
 "xmlns:websiteListsTypes":"urn:types.website_2020_1.lists.webservices.netsuite.com",
 "xmlns:purchasesTransactions":"urn:purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:financialTransactionsTypes":"urn:types.financial_2020_1.transactions.webservices.netsuite.com",
 "xmlns:schedulingActivities":"urn:scheduling_2020_1.activities.webservices.netsuite.com",
 "xmlns:bankTransactions":"urn:bank_2020_1.transactions.webservices.netsuite.com",
 "xmlns:marketingLists":"urn:marketing_2020_1.lists.webservices.netsuite.com",
 "xmlns:customersTransactionsTypes":"urn:types.customers_2020_1.transactions.webservices.netsuite.com",
 "xmlns:purchasesTransactionsTypes":"urn:types.purchases_2020_1.transactions.webservices.netsuite.com",
 "xmlns:generalTransactions":"urn:general_2020_1.transactions.webservices.netsuite.com",
 "xmlns:filecabinetDocumentsTypes":"urn:types.filecabinet_2020_1.documents.webservices.netsuite.com" ): {
              soap#Header:{
            urn#tokenPassport:{
                ns8#account : p('kimbleSoapNetsuite.realm'),
                ns8#consumerKey: p('secure::kimbleSoapNetsuite.consumerKey'),
                ns8#token: p('secure::kimbleSoapNetsuite.token'),
                ns8#nonce: (vars.oAuthHeaderFinal splitBy(","))[0],
                ns8#timestamp: (vars.oAuthHeaderFinal splitBy(","))[1],
                ns8#signature @("algorithm": p('soap.algorithm')): (vars.oAuthHeaderFinal splitBy(","))[2] },
                
       ns1#preferences :{
        ns2#ignoreReadOnlyFields  :true } ,
   
    ns3#searchPreferences  :{
        ns4#bodyFieldsOnly : true ,
        ns5#pageSize :50   }
 },
        
    
    soap#Body:{
        ns24#updateList @("xmlns:ns5":"urn:filecabinet_2020_1.documents.webservices.netsuite.com" ,
		"xmlns:ns6":"urn:relationships_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns3":"urn:common_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns4":"urn:communication_2020_1.general.webservices.netsuite.com" ,
		"xmlns:ns9":"urn:sales_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns7":"urn:support_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns8":"urn:accounting_2020_1.lists.webservices.netsuite.com" ,
		"xmlns": "urn:core_2020_1.platform.webservices.netsuite.com",
		"xmlns:ns19":"urn:employees_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns18":"urn:website_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns2":"urn:scheduling_2020_1.activities.webservices.netsuite.com" ,
		"xmlns:ns17":"urn:employees_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns16":"urn:customization_2020_1.setup.webservices.netsuite.com" ,
		"xmlns:ns15":"urn:general_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns14":"urn:inventory_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns13":"urn:bank_2020_1.transactions.webservices.netsuite.com" ,	
		"xmlns:ns12":"urn:financial_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns23":"urn:faults_2020_1.platform.webservices.netsuite.com" ,
		"xmlns:ns11":"urn:customers_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns22":"urn:supplychain_2020_1.lists.webservices.netsuite.com" ,
		"xmlns:ns10":"urn:purchases_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns21":"urn:demandplanning_2020_1.transactions.webservices.netsuite.com" ,
		"xmlns:ns20":"urn:marketing_2020_1.lists.webservices.netsuite.com") : {
             ns24#record @("xsi:type":"ns6:Job","externalId" : vars.vendorBillingSchLineSyncPayload.id , "xmlns:xsi" : "http://www.w3.org/2001/XMLSchema-instance"):{
                             
                
     //          customFieldList: {
		//				customField @( "xsi:type":"core:StringCustomFieldRef", "scriptId":"custbody_invoice_credit_body" ,"xmlns:core":"urn:core_2020_1.platform.webservices.netsuite.com"): {
			//				value: p('invoice.creditBody')
				//		}
					//},
                ns6#customFieldList:{
                	
                       customField  @("xsi:type":"BooleanCustomFieldRef", "scriptId":"custrecord_synced_to_sfdc_vbs_line"):{ value : vars.vendorBillingSchLineSyncPayload.syncToSfdc }
                        
}

}
}
}
}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<ee:transform doc:name="payloadXML" doc:id="837070f7-a256-46b2-a81e-f5a1f9e8b09b" >
			<ee:message />
			<ee:variables >
				<ee:set-variable variableName="soapHeader" ><![CDATA[%dw 2.0
output application/xml
ns soap http://schemas.xmlsoap.org/soap/envelope/
---
{
headers: payload.Envelope.Header


}]]></ee:set-variable>
				<ee:set-variable variableName="targetPayload" ><![CDATA[%dw 2.0
output application/xml
---
payload]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<logger level="INFO" doc:name="Logger - Full payload " doc:id="d9ebf26e-ca63-4925-a53b-58a5588daf8e" message="#[payload]" />
		<try doc:name="Try" doc:id="5c1d90a0-a5aa-4068-87a8-3aebd771c88b" >
			<wsc:consume operation="${soap.wsdlUpdateOperation}" doc:name="Invoke-vendorBillingScheduleLine" doc:id="b2e0c23d-1726-45d8-8d6d-8d927c2bb71c" config-ref="Web_Service_Consumer_Config" target="responsePayload" >
				<wsc:message >
					<wsc:body ><![CDATA[#[payload.Envelope.Body]]]></wsc:body>
					<wsc:headers ><![CDATA[#[vars.soapHeader]]]></wsc:headers>
				</wsc:message>
			</wsc:consume>
			<error-handler >
				<on-error-propagate enableNotifications="true" logException="true" doc:name="On Error Propagate" doc:id="e3dfd4a8-d588-4ea5-8415-5883c0dc0f2e" type="ANY" >
					<logger level="INFO" doc:name="Logger" doc:id="d199248b-d699-4047-95bb-e2fe5e450a1e" message="#[error.description]" />
					<ee:transform doc:name="Transform Message" doc:id="8d040ce9-e5d8-4c8e-94da-c271359135a6" >
						<ee:message >
							<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	vendorBillingScheduleLine : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "vendorBillingScheduleLine",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
						</ee:message>
					</ee:transform>
					<anypoint-mq:publish doc:name="Publish_to_ErrorQueue" doc:id="d4150bc0-b3d5-4948-b2f9-88a2a9ded2fe" config-ref="Anypoint_MQ_Config" destination="project-setup-DL-queue" >
						<anypoint-mq:properties ><![CDATA[#[output application/java
---
{
	objectName : Job
}]]]></anypoint-mq:properties>
					</anypoint-mq:publish>
				</on-error-propagate>
			</error-handler>
		</try>
		<logger level="INFO" doc:name="Logger" doc:id="90272ef0-861d-4d75-bfd6-33871f61069e" message="#[vars.responsePayload]" />
		<ee:transform doc:name="isSuccess" doc:id="b61334e0-c0c5-4248-ad13-1faded787dbd" >
			<ee:message />
			<ee:variables >
				<ee:set-variable variableName="isSuccess" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	
	message :  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess
}]]></ee:set-variable>
				<ee:set-variable variableName="businessError" ><![CDATA[%dw 2.0
output application/json 
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com
---
{
	(message : "Task for external Id " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId ++ " is " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId) if(vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@internalId != null), 
	
	(message : "Task creation failed for external id  " ++  vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId  ++ " with reason: " ++ vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message) if (vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.status.@isSuccess ~= false)
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<choice doc:name="Choice" doc:id="8219c30c-b68f-4b21-8903-50d74f13d492" >
			<when expression="#[vars.isSuccess.message == 'true']" >
				<ee:transform doc:name="Transform Message" doc:id="7bde8249-ce97-494a-bc5f-a5a4a8923884" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
---
{
	internalId: vars.responsePayload.body.ns0#upsertListResponse.ns0#writeResponseList.ns0#writeResponse.ns0#baseRef.@internalId,
	syncedToNS: true
}]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="3329acd1-2c1f-4e1a-bb3d-fd790926f74d" message="#[payload]" />
			</when>
			<otherwise >
				<logger level="INFO" doc:name="Logger" doc:id="23eb2ea4-6795-426e-ab87-dd5f95c72b7b" message="#[payload]" />
				<ee:transform doc:name="Transform Message" doc:id="83b2925f-3083-429f-ac11-72e9fd6e80a6" >
					<ee:message >
						<ee:set-payload ><![CDATA[%dw 2.0
output application/json
ns ns0 urn:messages_2020_1.platform.webservices.netsuite.com
ns ns01 urn:core_2020_1.platform.webservices.netsuite.com

var failurersp = {
	vendorBillingScheduleLine : {
		netsuiteInternalId: null,
		externalId: vars.responsePayload.body.ns0#upsertListResponse.writeResponseList.writeResponse.baseRef.@externalId,
		errormessage: vars.responsePayload.body.upsertListResponse.writeResponseList.writeResponse.status.statusDetail.message,
		syncedToNS: false
	}
}
---
[{
	initialPayload: vars.responsePayload,
	payloadForTarget: failurersp,
	objPrefix: "FEP",
	interfaceName: "vendorBillingScheduleLine",
	sourceName: "Salesforce",
	targetName: "Netsuite",
	correlationId: vars.inputProperties.correlationId,
	resourcePath: "MQ",
	httpMethod: "MQ"

}]]]></ee:set-payload>
					</ee:message>
				</ee:transform>
				<logger level="INFO" doc:name="Logger" doc:id="6c38f7a0-11e5-489d-9003-ab851c3b3636" />
			</otherwise>
		</choice>
		<flow-ref doc:name="log-after-outbound-request" doc:id="562fdcd6-b9e4-4366-b924-6e29a46adb21" name="log-after-outbound-request" />
	</sub-flow>
	
	</mule>
